
ZP_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000530c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080054a0  080054a0  000154a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055b0  080055b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080055b0  080055b0  000155b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055b8  080055b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080055b8  080055b8  000155b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055c0  080055c0  000155c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080055c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  20000070  08005634  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  08005634  00020680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016480  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003414  00000000  00000000  00036520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00039938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0003ad00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c182  00000000  00000000  0003bf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a52  00000000  00000000  00058112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fd68  00000000  00000000  00071b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001118cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d4  00000000  00000000  0011191c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005488 	.word	0x08005488

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08005488 	.word	0x08005488

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <_ZN10PWMChannelC1Ev>:
    {PWM1_Pin, PWM1_GPIO_Port, &htim3, TIM_CHANNEL_1, false, {0}, 0, 0},
    {PWM2_Pin, PWM2_GPIO_Port, &htim3, TIM_CHANNEL_2, false, {0}, 0, 0},
    {PWM3_Pin, PWM3_GPIO_Port, &htim3, TIM_CHANNEL_3, false, {0}, 0, 0},
    {PWM4_Pin, PWM4_GPIO_Port, &htim3, TIM_CHANNEL_4, false, {0}, 0, 0}};

PWMChannel::PWMChannel() {
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b089      	sub	sp, #36	; 0x24
 80004dc:	af04      	add	r7, sp, #16
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f240 32b6 	movw	r2, #950	; 0x3b6
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f640 0202 	movw	r2, #2050	; 0x802
 80004f6:	609a      	str	r2, [r3, #8]
  for (int i = 0; i < NUM_AVAILABLE_CHANNELS; i++) {
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	2b07      	cmp	r3, #7
 8000500:	dc35      	bgt.n	800056e <_ZN10PWMChannelC1Ev+0x96>
    const PWMPinConfig *currentChannel = &PWM_CONFIG[i];
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	4613      	mov	r3, r2
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	4413      	add	r3, r2
 800050a:	00db      	lsls	r3, r3, #3
 800050c:	4a1a      	ldr	r2, [pc, #104]	; (8000578 <_ZN10PWMChannelC1Ev+0xa0>)
 800050e:	4413      	add	r3, r2
 8000510:	60bb      	str	r3, [r7, #8]
    HAL_TIM_PWM_Start(currentChannel->timer, currentChannel->timer_channel);
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	689a      	ldr	r2, [r3, #8]
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	899b      	ldrh	r3, [r3, #12]
 800051a:	4619      	mov	r1, r3
 800051c:	4610      	mov	r0, r2
 800051e:	f003 fbb7 	bl	8003c90 <HAL_TIM_PWM_Start>

    if (currentChannel->isUsingDshot) {
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	7b9b      	ldrb	r3, [r3, #14]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d01d      	beq.n	8000566 <_ZN10PWMChannelC1Ev+0x8e>
      dshotPrepareDMABuffer(currentChannel->dshotDMABuffer, 0);  // init buffer for 0 percent throttle
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	691b      	ldr	r3, [r3, #16]
 800052e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800057c <_ZN10PWMChannelC1Ev+0xa4>
 8000532:	4619      	mov	r1, r3
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f000 f8a9 	bl	800068c <_ZN10PWMChannel21dshotPrepareDMABufferEPmf>
      dshotStartDMA(*currentChannel);  // start DMA... it should never be stopped after this bec it is in circular mode
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	466c      	mov	r4, sp
 800053e:	f103 020c 	add.w	r2, r3, #12
 8000542:	ca07      	ldmia	r2, {r0, r1, r2}
 8000544:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f000 f91a 	bl	8000784 <_ZN10PWMChannel13dshotStartDMAE12PWMPinConfig>
      dshotEnableDMARequests(*currentChannel);
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	466c      	mov	r4, sp
 8000554:	f103 020c 	add.w	r2, r3, #12
 8000558:	ca07      	ldmia	r2, {r0, r1, r2}
 800055a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800055e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f000 f95f 	bl	8000824 <_ZN10PWMChannel22dshotEnableDMARequestsE12PWMPinConfig>
  for (int i = 0; i < NUM_AVAILABLE_CHANNELS; i++) {
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	3301      	adds	r3, #1
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	e7c6      	b.n	80004fc <_ZN10PWMChannelC1Ev+0x24>
    }
  }
}
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4618      	mov	r0, r3
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	bd90      	pop	{r4, r7, pc}
 8000578:	080054a0 	.word	0x080054a0
 800057c:	00000000 	.word	0x00000000

08000580 <_ZN10PWMChannel3setEhf>:

void PWMChannel::set(uint8_t channel, float percent) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	460b      	mov	r3, r1
 800058a:	ed87 0a01 	vstr	s0, [r7, #4]
 800058e:	72fb      	strb	r3, [r7, #11]
  if (channel > MAX_CHANNELS || channel < 0) {
 8000590:	7afb      	ldrb	r3, [r7, #11]
 8000592:	2b0a      	cmp	r3, #10
 8000594:	d901      	bls.n	800059a <_ZN10PWMChannel3setEhf+0x1a>
    channel = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	72fb      	strb	r3, [r7, #11]
  }

  const PWMPinConfig *currentChannel = &PWM_CONFIG[channel];
 800059a:	7afa      	ldrb	r2, [r7, #11]
 800059c:	4613      	mov	r3, r2
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	4413      	add	r3, r2
 80005a2:	00db      	lsls	r3, r3, #3
 80005a4:	4a37      	ldr	r2, [pc, #220]	; (8000684 <_ZN10PWMChannel3setEhf+0x104>)
 80005a6:	4413      	add	r3, r2
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24

  if (currentChannel->isUsingDshot) {
 80005aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ac:	7b9b      	ldrb	r3, [r3, #14]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d008      	beq.n	80005c4 <_ZN10PWMChannel3setEhf+0x44>
    // the only thing we will do is update the buffer for the next pass of DMA transfers
    dshotPrepareDMABuffer(currentChannel->dshotDMABuffer, percent);
 80005b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b4:	691b      	ldr	r3, [r3, #16]
 80005b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80005ba:	4619      	mov	r1, r3
 80005bc:	68f8      	ldr	r0, [r7, #12]
 80005be:	f000 f865 	bl	800068c <_ZN10PWMChannel21dshotPrepareDMABufferEPmf>
    uint32_t periodTicks = (static_cast<TIM_HandleTypeDef *>(currentChannel->timer))->Init.Period;
    uint32_t ticks = static_cast<uint32_t>((static_cast<float>(us) / static_cast<float>(pwmPeriod)) *
                                           static_cast<float>(periodTicks));
    __HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)currentChannel->timer, currentChannel->timer_channel, (uint32_t)ticks);
  }
}
 80005c2:	e05b      	b.n	800067c <_ZN10PWMChannel3setEhf+0xfc>
    uint32_t prescaler = (static_cast<TIM_HandleTypeDef *>(currentChannel->timer))->Init.Prescaler;
 80005c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	623b      	str	r3, [r7, #32]
        (((uint8_t)percent * (PWMChannel::max_signal - PWMChannel::min_signal)) / 100 + PWMChannel::min_signal);
 80005cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80005d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005d4:	edc7 7a00 	vstr	s15, [r7]
 80005d8:	783b      	ldrb	r3, [r7, #0]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	4619      	mov	r1, r3
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	689a      	ldr	r2, [r3, #8]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	fb01 f303 	mul.w	r3, r1, r3
 80005ec:	4a26      	ldr	r2, [pc, #152]	; (8000688 <_ZN10PWMChannel3setEhf+0x108>)
 80005ee:	fba2 2303 	umull	r2, r3, r2, r3
 80005f2:	095a      	lsrs	r2, r3, #5
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	685b      	ldr	r3, [r3, #4]
    uint32_t us =
 80005f8:	4413      	add	r3, r2
 80005fa:	61fb      	str	r3, [r7, #28]
    uint32_t periodTicks = (static_cast<TIM_HandleTypeDef *>(currentChannel->timer))->Init.Period;
 80005fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	61bb      	str	r3, [r7, #24]
    uint32_t ticks = static_cast<uint32_t>((static_cast<float>(us) / static_cast<float>(pwmPeriod)) *
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	ee07 3a90 	vmov	s15, r3
 800060a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	ee07 3a90 	vmov	s15, r3
 8000616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800061a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                                           static_cast<float>(periodTicks));
 800061e:	69bb      	ldr	r3, [r7, #24]
 8000620:	ee07 3a90 	vmov	s15, r3
 8000624:	eef8 7a67 	vcvt.f32.u32	s15, s15
    uint32_t ticks = static_cast<uint32_t>((static_cast<float>(us) / static_cast<float>(pwmPeriod)) *
 8000628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800062c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000630:	ee17 3a90 	vmov	r3, s15
 8000634:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)currentChannel->timer, currentChannel->timer_channel, (uint32_t)ticks);
 8000636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000638:	899b      	ldrh	r3, [r3, #12]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d105      	bne.n	800064a <_ZN10PWMChannel3setEhf+0xca>
 800063e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	697a      	ldr	r2, [r7, #20]
 8000646:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000648:	e018      	b.n	800067c <_ZN10PWMChannel3setEhf+0xfc>
    __HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)currentChannel->timer, currentChannel->timer_channel, (uint32_t)ticks);
 800064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064c:	899b      	ldrh	r3, [r3, #12]
 800064e:	2b04      	cmp	r3, #4
 8000650:	d105      	bne.n	800065e <_ZN10PWMChannel3setEhf+0xde>
 8000652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800065c:	e00e      	b.n	800067c <_ZN10PWMChannel3setEhf+0xfc>
    __HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)currentChannel->timer, currentChannel->timer_channel, (uint32_t)ticks);
 800065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000660:	899b      	ldrh	r3, [r3, #12]
 8000662:	2b08      	cmp	r3, #8
 8000664:	d105      	bne.n	8000672 <_ZN10PWMChannel3setEhf+0xf2>
 8000666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	697a      	ldr	r2, [r7, #20]
 800066e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000670:	e004      	b.n	800067c <_ZN10PWMChannel3setEhf+0xfc>
    __HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)currentChannel->timer, currentChannel->timer_channel, (uint32_t)ticks);
 8000672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	697a      	ldr	r2, [r7, #20]
 800067a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	; 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	080054a0 	.word	0x080054a0
 8000688:	51eb851f 	.word	0x51eb851f

0800068c <_ZN10PWMChannel21dshotPrepareDMABufferEPmf>:

void PWMChannel::dshotPrepareDMABuffer(uint32_t *dmaBuffer, float throttlePercentage) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t frame = dshotPrepareFrame(throttlePercentage, false);
 800069a:	2100      	movs	r1, #0
 800069c:	ed97 0a01 	vldr	s0, [r7, #4]
 80006a0:	68f8      	ldr	r0, [r7, #12]
 80006a2:	f000 f827 	bl	80006f4 <_ZN10PWMChannel17dshotPrepareFrameEfb>
 80006a6:	4603      	mov	r3, r0
 80006a8:	82fb      	strh	r3, [r7, #22]

  for (int i = 0; i < DSHOT_DATA_FRAME_LEN; i++) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	2b0f      	cmp	r3, #15
 80006b2:	dc12      	bgt.n	80006da <_ZN10PWMChannel21dshotPrepareDMABufferEPmf+0x4e>
    // Using the frame, populate the buffer with the duty cycle value corresponding to a 1 and 0
    // We are masking out everything except the most significant bit (far left bit) and setting the proper value in the
    // buffer depending if it's a 1 or 0
    dmaBuffer[i] = (frame & 0x8000 ? DSHOT_150_BIT_1 : DSHOT_150_BIT_0);
 80006b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	da01      	bge.n	80006c0 <_ZN10PWMChannel21dshotPrepareDMABufferEPmf+0x34>
 80006bc:	22f0      	movs	r2, #240	; 0xf0
 80006be:	e000      	b.n	80006c2 <_ZN10PWMChannel21dshotPrepareDMABufferEPmf+0x36>
 80006c0:	2278      	movs	r2, #120	; 0x78
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	68b9      	ldr	r1, [r7, #8]
 80006c8:	440b      	add	r3, r1
 80006ca:	601a      	str	r2, [r3, #0]

    // Left shifting the current frame over by 1 to set the next frame bit in the buffer
    frame <<= 1;
 80006cc:	8afb      	ldrh	r3, [r7, #22]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	82fb      	strh	r3, [r7, #22]
  for (int i = 0; i < DSHOT_DATA_FRAME_LEN; i++) {
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	3301      	adds	r3, #1
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	e7e9      	b.n	80006ae <_ZN10PWMChannel21dshotPrepareDMABufferEPmf+0x22>
  }

  // Setting the last two indexes in the buffer to 0 to ensure the last part of the signal is low
  dmaBuffer[16] = 0;
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	3340      	adds	r3, #64	; 0x40
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
  dmaBuffer[17] = 0;
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	3344      	adds	r3, #68	; 0x44
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
}
 80006ea:	bf00      	nop
 80006ec:	3718      	adds	r7, #24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <_ZN10PWMChannel17dshotPrepareFrameEfb>:

uint16_t PWMChannel::dshotPrepareFrame(float throttlePercentage, bool telemetry) {
 80006f4:	b480      	push	{r7}
 80006f6:	b087      	sub	sp, #28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000700:	460b      	mov	r3, r1
 8000702:	71fb      	strb	r3, [r7, #7]
   *                                           Telemetry
   */

  uint16_t frame;

  frame = (((uint16_t)(DSHOT_MAX_THROTTLE * throttlePercentage / 100) + DSHOT_RESERVED_VALUES) << 1) |
 8000704:	edd7 7a02 	vldr	s15, [r7, #8]
 8000708:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800077c <_ZN10PWMChannel17dshotPrepareFrameEfb+0x88>
 800070c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000710:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000780 <_ZN10PWMChannel17dshotPrepareFrameEfb+0x8c>
 8000714:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800071c:	ee17 3a90 	vmov	r3, s15
 8000720:	b29b      	uxth	r3, r3
 8000722:	332f      	adds	r3, #47	; 0x2f
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	b21b      	sxth	r3, r3
 8000728:	79fa      	ldrb	r2, [r7, #7]
 800072a:	2a00      	cmp	r2, #0
 800072c:	d001      	beq.n	8000732 <_ZN10PWMChannel17dshotPrepareFrameEfb+0x3e>
 800072e:	2201      	movs	r2, #1
 8000730:	e000      	b.n	8000734 <_ZN10PWMChannel17dshotPrepareFrameEfb+0x40>
 8000732:	2200      	movs	r2, #0
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	82fb      	strh	r3, [r7, #22]
          (telemetry ? 1 : 0);  // throttle and telemetry bits

  uint8_t checksum = (frame ^ (frame >> 4) ^ (frame >> 8)) &
 800073a:	8afb      	ldrh	r3, [r7, #22]
 800073c:	091b      	lsrs	r3, r3, #4
 800073e:	b29b      	uxth	r3, r3
 8000740:	b2da      	uxtb	r2, r3
 8000742:	8afb      	ldrh	r3, [r7, #22]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	4053      	eors	r3, r2
 8000748:	b2da      	uxtb	r2, r3
 800074a:	8afb      	ldrh	r3, [r7, #22]
 800074c:	0a1b      	lsrs	r3, r3, #8
 800074e:	b29b      	uxth	r3, r3
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4053      	eors	r3, r2
 8000754:	b2db      	uxtb	r3, r3
 8000756:	f003 030f 	and.w	r3, r3, #15
 800075a:	757b      	strb	r3, [r7, #21]
                     0x00F;  // calculating checksum... splitting first 12 bits into 3 nibbles and XORing

  frame = (frame << 4) | checksum;  // adding the checksum to the frame
 800075c:	8afb      	ldrh	r3, [r7, #22]
 800075e:	011b      	lsls	r3, r3, #4
 8000760:	b21a      	sxth	r2, r3
 8000762:	7d7b      	ldrb	r3, [r7, #21]
 8000764:	b21b      	sxth	r3, r3
 8000766:	4313      	orrs	r3, r2
 8000768:	b21b      	sxth	r3, r3
 800076a:	82fb      	strh	r3, [r7, #22]

  return frame;
 800076c:	8afb      	ldrh	r3, [r7, #22]
}
 800076e:	4618      	mov	r0, r3
 8000770:	371c      	adds	r7, #28
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	44fa0000 	.word	0x44fa0000
 8000780:	42c80000 	.word	0x42c80000

08000784 <_ZN10PWMChannel13dshotStartDMAE12PWMPinConfig>:

void PWMChannel::dshotStartDMA(PWMPinConfig dshotConfig) {
 8000784:	b084      	sub	sp, #16
 8000786:	b580      	push	{r7, lr}
 8000788:	b084      	sub	sp, #16
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	f107 001c 	add.w	r0, r7, #28
 8000792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t destinationBuffer;

  switch (dshotConfig.timer_channel) {
 8000796:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000798:	2b0c      	cmp	r3, #12
 800079a:	d831      	bhi.n	8000800 <_ZN10PWMChannel13dshotStartDMAE12PWMPinConfig+0x7c>
 800079c:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <_ZN10PWMChannel13dshotStartDMAE12PWMPinConfig+0x20>)
 800079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a2:	bf00      	nop
 80007a4:	080007d9 	.word	0x080007d9
 80007a8:	08000801 	.word	0x08000801
 80007ac:	08000801 	.word	0x08000801
 80007b0:	08000801 	.word	0x08000801
 80007b4:	080007e3 	.word	0x080007e3
 80007b8:	08000801 	.word	0x08000801
 80007bc:	08000801 	.word	0x08000801
 80007c0:	08000801 	.word	0x08000801
 80007c4:	080007ed 	.word	0x080007ed
 80007c8:	08000801 	.word	0x08000801
 80007cc:	08000801 	.word	0x08000801
 80007d0:	08000801 	.word	0x08000801
 80007d4:	080007f7 	.word	0x080007f7
    case TIM_CHANNEL_1:
      destinationBuffer = (uint32_t)&dshotConfig.timer->Instance->CCR1;
 80007d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	3334      	adds	r3, #52	; 0x34
 80007de:	60fb      	str	r3, [r7, #12]
      break;
 80007e0:	e00e      	b.n	8000800 <_ZN10PWMChannel13dshotStartDMAE12PWMPinConfig+0x7c>

    case TIM_CHANNEL_2:
      destinationBuffer = (uint32_t)&dshotConfig.timer->Instance->CCR2;
 80007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	3338      	adds	r3, #56	; 0x38
 80007e8:	60fb      	str	r3, [r7, #12]
      break;
 80007ea:	e009      	b.n	8000800 <_ZN10PWMChannel13dshotStartDMAE12PWMPinConfig+0x7c>

    case TIM_CHANNEL_3:
      destinationBuffer = (uint32_t)&dshotConfig.timer->Instance->CCR3;
 80007ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	333c      	adds	r3, #60	; 0x3c
 80007f2:	60fb      	str	r3, [r7, #12]
      break;
 80007f4:	e004      	b.n	8000800 <_ZN10PWMChannel13dshotStartDMAE12PWMPinConfig+0x7c>

    case TIM_CHANNEL_4:
      destinationBuffer = (uint32_t)&dshotConfig.timer->Instance->CCR4;
 80007f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	3340      	adds	r3, #64	; 0x40
 80007fc:	60fb      	str	r3, [r7, #12]
      break;
 80007fe:	bf00      	nop
  }
  HAL_DMA_Start(dshotConfig.timer->hdma[dshotConfig.timDMAHandleIndex], (uint32_t)dshotConfig.dshotDMABuffer,
 8000800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000802:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000804:	3208      	adds	r2, #8
 8000806:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800080a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800080c:	4619      	mov	r1, r3
 800080e:	2312      	movs	r3, #18
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	f001 fed1 	bl	80025b8 <HAL_DMA_Start>
                destinationBuffer, DSHOT_DMA_BUFFER_SIZE);
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000820:	b004      	add	sp, #16
 8000822:	4770      	bx	lr

08000824 <_ZN10PWMChannel22dshotEnableDMARequestsE12PWMPinConfig>:

void PWMChannel::dshotEnableDMARequests(PWMPinConfig dshotConfig) {
 8000824:	b084      	sub	sp, #16
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	f107 0014 	add.w	r0, r7, #20
 8000832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  __HAL_TIM_ENABLE_DMA(dshotConfig.timer, dshotConfig.timDMASource);
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	68da      	ldr	r2, [r3, #12]
 800083c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800083e:	4619      	mov	r1, r3
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	430a      	orrs	r2, r1
 8000846:	60da      	str	r2, [r3, #12]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	b004      	add	sp, #16
 8000854:	4770      	bx	lr
	...

08000858 <_Z41__static_initialization_and_destruction_0ii>:
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d10c      	bne.n	8000882 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800086e:	4293      	cmp	r3, r2
 8000870:	d107      	bne.n	8000882 <_Z41__static_initialization_and_destruction_0ii+0x2a>
extern TIM_HandleTypeDef DSHOT_TIM;
 8000872:	4a06      	ldr	r2, [pc, #24]	; (800088c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8000876:	4610      	mov	r0, r2
 8000878:	4619      	mov	r1, r3
 800087a:	2348      	movs	r3, #72	; 0x48
 800087c:	461a      	mov	r2, r3
 800087e:	f004 fcf7 	bl	8005270 <memcpy>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000008c 	.word	0x2000008c
 8000890:	20000344 	.word	0x20000344

08000894 <_GLOBAL__sub_I_DSHOT_TIM>:
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
 8000898:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff ffdb 	bl	8000858 <_Z41__static_initialization_and_destruction_0ii>
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <_Z9safetyRunv>:

#include "../Inc/PWM.hpp"
#include "main.h"
// #include "../../Peripherals/Inc/PPM.hpp"

void safetyRun(){
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
	// Runs safety!
	 PWMChannel *pwm = new PWMChannel();
 80008aa:	200c      	movs	r0, #12
 80008ac:	f004 fc8c 	bl	80051c8 <_Znwj>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461c      	mov	r4, r3
 80008b4:	4620      	mov	r0, r4
 80008b6:	f7ff fe0f 	bl	80004d8 <_ZN10PWMChannelC1Ev>
 80008ba:	60bc      	str	r4, [r7, #8]
	 uint8_t max_channels = 8;
 80008bc:	2308      	movs	r3, #8
 80008be:	71fb      	strb	r3, [r7, #7]
	 for(int i =0; i< max_channels; ++i) {
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	da0b      	bge.n	80008e4 <_Z9safetyRunv+0x40>
		 pwm->set(i, 75);
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80008f4 <_Z9safetyRunv+0x50>
 80008d4:	4619      	mov	r1, r3
 80008d6:	68b8      	ldr	r0, [r7, #8]
 80008d8:	f7ff fe52 	bl	8000580 <_ZN10PWMChannel3setEhf>
	 for(int i =0; i< max_channels; ++i) {
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	3301      	adds	r3, #1
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	e7ef      	b.n	80008c4 <_Z9safetyRunv+0x20>
	 }

	 while (1) {
		 // toggle LED pin?
		 HAL_GPIO_TogglePin (LD2_GPIO_Port, LD2_Pin);
 80008e4:	2120      	movs	r1, #32
 80008e6:	4804      	ldr	r0, [pc, #16]	; (80008f8 <_Z9safetyRunv+0x54>)
 80008e8:	f002 faa9 	bl	8002e3e <HAL_GPIO_TogglePin>
		 HAL_Delay (100);   /* Insert delay 100 ms */
 80008ec:	2064      	movs	r0, #100	; 0x64
 80008ee:	f001 fa1d 	bl	8001d2c <HAL_Delay>
		 HAL_GPIO_TogglePin (LD2_GPIO_Port, LD2_Pin);
 80008f2:	e7f7      	b.n	80008e4 <_Z9safetyRunv+0x40>
 80008f4:	42960000 	.word	0x42960000
 80008f8:	40020000 	.word	0x40020000

080008fc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000902:	463b      	mov	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <MX_ADC1_Init+0x98>)
 8000910:	4a21      	ldr	r2, [pc, #132]	; (8000998 <MX_ADC1_Init+0x9c>)
 8000912:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_ADC1_Init+0x98>)
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800091a:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <MX_ADC1_Init+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_ADC1_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000926:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_ADC1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800092c:	4b19      	ldr	r3, [pc, #100]	; (8000994 <MX_ADC1_Init+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <MX_ADC1_Init+0x98>)
 8000936:	2200      	movs	r2, #0
 8000938:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800093a:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_ADC1_Init+0x98>)
 800093c:	4a17      	ldr	r2, [pc, #92]	; (800099c <MX_ADC1_Init+0xa0>)
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_ADC1_Init+0x98>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_ADC1_Init+0x98>)
 8000948:	2201      	movs	r2, #1
 800094a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_ADC1_Init+0x98>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_ADC1_Init+0x98>)
 8000956:	2201      	movs	r2, #1
 8000958:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800095a:	480e      	ldr	r0, [pc, #56]	; (8000994 <MX_ADC1_Init+0x98>)
 800095c:	f001 fa0a 	bl	8001d74 <HAL_ADC_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000966:	f000 fa5b 	bl	8000e20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800096a:	2312      	movs	r3, #18
 800096c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800096e:	2301      	movs	r3, #1
 8000970:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000976:	463b      	mov	r3, r7
 8000978:	4619      	mov	r1, r3
 800097a:	4806      	ldr	r0, [pc, #24]	; (8000994 <MX_ADC1_Init+0x98>)
 800097c:	f001 fa3e 	bl	8001dfc <HAL_ADC_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000986:	f000 fa4b 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200001f4 	.word	0x200001f4
 8000998:	40012000 	.word	0x40012000
 800099c:	0f000001 	.word	0x0f000001

080009a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a17      	ldr	r2, [pc, #92]	; (8000a1c <HAL_ADC_MspInit+0x7c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d127      	bne.n	8000a12 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <HAL_ADC_MspInit+0x80>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <HAL_ADC_MspInit+0x80>)
 80009cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <HAL_ADC_MspInit+0x80>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_ADC_MspInit+0x80>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <HAL_ADC_MspInit+0x80>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_ADC_MspInit+0x80>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009fa:	2303      	movs	r3, #3
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fe:	2303      	movs	r3, #3
 8000a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <HAL_ADC_MspInit+0x84>)
 8000a0e:	f002 f879 	bl	8002b04 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40012000 	.word	0x40012000
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000

08000a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_DMA_Init+0x6c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <MX_DMA_Init+0x6c>)
 8000a38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_DMA_Init+0x6c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2039      	movs	r0, #57	; 0x39
 8000a50:	f001 fccd 	bl	80023ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a54:	2039      	movs	r0, #57	; 0x39
 8000a56:	f001 fce6 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	203a      	movs	r0, #58	; 0x3a
 8000a60:	f001 fcc5 	bl	80023ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a64:	203a      	movs	r0, #58	; 0x3a
 8000a66:	f001 fcde 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	203c      	movs	r0, #60	; 0x3c
 8000a70:	f001 fcbd 	bl	80023ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000a74:	203c      	movs	r0, #60	; 0x3c
 8000a76:	f001 fcd6 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2045      	movs	r0, #69	; 0x45
 8000a80:	f001 fcb5 	bl	80023ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a84:	2045      	movs	r0, #69	; 0x45
 8000a86:	f001 fcce 	bl	8002426 <HAL_NVIC_EnableIRQ>

}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b51      	ldr	r3, [pc, #324]	; (8000bf8 <MX_GPIO_Init+0x160>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a50      	ldr	r2, [pc, #320]	; (8000bf8 <MX_GPIO_Init+0x160>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b4e      	ldr	r3, [pc, #312]	; (8000bf8 <MX_GPIO_Init+0x160>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b4a      	ldr	r3, [pc, #296]	; (8000bf8 <MX_GPIO_Init+0x160>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a49      	ldr	r2, [pc, #292]	; (8000bf8 <MX_GPIO_Init+0x160>)
 8000ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b47      	ldr	r3, [pc, #284]	; (8000bf8 <MX_GPIO_Init+0x160>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	4b43      	ldr	r3, [pc, #268]	; (8000bf8 <MX_GPIO_Init+0x160>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a42      	ldr	r2, [pc, #264]	; (8000bf8 <MX_GPIO_Init+0x160>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b40      	ldr	r3, [pc, #256]	; (8000bf8 <MX_GPIO_Init+0x160>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b3c      	ldr	r3, [pc, #240]	; (8000bf8 <MX_GPIO_Init+0x160>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a3b      	ldr	r2, [pc, #236]	; (8000bf8 <MX_GPIO_Init+0x160>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b39      	ldr	r3, [pc, #228]	; (8000bf8 <MX_GPIO_Init+0x160>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2120      	movs	r1, #32
 8000b22:	4836      	ldr	r0, [pc, #216]	; (8000bfc <MX_GPIO_Init+0x164>)
 8000b24:	f002 f972 	bl	8002e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_OUT2_Pin|GPIO_OUT1_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000b2e:	4834      	ldr	r0, [pc, #208]	; (8000c00 <MX_GPIO_Init+0x168>)
 8000b30:	f002 f96c 	bl	8002e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b3a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	482e      	ldr	r0, [pc, #184]	; (8000c04 <MX_GPIO_Init+0x16c>)
 8000b4c:	f001 ffda 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RSSI_Pin;
 8000b50:	2302      	movs	r3, #2
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	4827      	ldr	r0, [pc, #156]	; (8000c04 <MX_GPIO_Init+0x16c>)
 8000b66:	f001 ffcd 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b6a:	2320      	movs	r3, #32
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	481e      	ldr	r0, [pc, #120]	; (8000bfc <MX_GPIO_Init+0x164>)
 8000b82:	f001 ffbf 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_Analog3_Pin|GPIO_Analog2_Pin;
 8000b86:	2330      	movs	r3, #48	; 0x30
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	481a      	ldr	r0, [pc, #104]	; (8000c04 <MX_GPIO_Init+0x16c>)
 8000b9a:	f001 ffb3 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_Analog1_Pin;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_Analog1_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4813      	ldr	r0, [pc, #76]	; (8000c00 <MX_GPIO_Init+0x168>)
 8000bb2:	f001 ffa7 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_OUT2_Pin|GPIO_OUT1_Pin;
 8000bb6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480c      	ldr	r0, [pc, #48]	; (8000c00 <MX_GPIO_Init+0x168>)
 8000bd0:	f001 ff98 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_IN2_Pin|GPIO_IN1_Pin;
 8000bd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4806      	ldr	r0, [pc, #24]	; (8000c04 <MX_GPIO_Init+0x16c>)
 8000bea:	f001 ff8b 	bl	8002b04 <HAL_GPIO_Init>

}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	40020400 	.word	0x40020400
 8000c04:	40020800 	.word	0x40020800

08000c08 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <MX_I2C1_Init+0x54>)
 8000c10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c14:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <MX_I2C1_Init+0x58>)
 8000c16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c46:	f002 f915 	bl	8002e74 <HAL_I2C_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c50:	f000 f8e6 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	2000023c 	.word	0x2000023c
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	000186a0 	.word	0x000186a0

08000c64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a19      	ldr	r2, [pc, #100]	; (8000ce8 <HAL_I2C_MspInit+0x84>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d12c      	bne.n	8000ce0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_I2C_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a17      	ldr	r2, [pc, #92]	; (8000cec <HAL_I2C_MspInit+0x88>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_I2C_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000ca2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca8:	2312      	movs	r3, #18
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <HAL_I2C_MspInit+0x8c>)
 8000cc0:	f001 ff20 	bl	8002b04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_I2C_MspInit+0x88>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_I2C_MspInit+0x88>)
 8000cce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_I2C_MspInit+0x88>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	; 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40005400 	.word	0x40005400
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf8:	f000 ffa6 	bl	8001c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfc:	f000 f81c 	bl	8000d38 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d00:	f7ff feca 	bl	8000a98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d04:	f7ff fe90 	bl	8000a28 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d08:	f000 fe6c 	bl	80019e4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d0c:	f7ff ff7c 	bl	8000c08 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000d10:	f000 f88c 	bl	8000e2c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000d14:	f000 f8bc 	bl	8000e90 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000d18:	f000 fa6e 	bl	80011f8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000d1c:	f7ff fdee 	bl	80008fc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000d20:	f000 fb2e 	bl	8001380 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d24:	f000 fba6 	bl	8001474 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000d28:	f000 fe32 	bl	8001990 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000d2c:	f000 fe84 	bl	8001a38 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  safetyRun();
 8000d30:	f7ff fdb8 	bl	80008a4 <_Z9safetyRunv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <main+0x40>
	...

08000d38 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b094      	sub	sp, #80	; 0x50
 8000d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3e:	f107 0320 	add.w	r3, r7, #32
 8000d42:	2230      	movs	r2, #48	; 0x30
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f004 faa0 	bl	800528c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <_Z18SystemClock_Configv+0xe0>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	4a2c      	ldr	r2, [pc, #176]	; (8000e18 <_Z18SystemClock_Configv+0xe0>)
 8000d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <_Z18SystemClock_Configv+0xe0>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d78:	2300      	movs	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <_Z18SystemClock_Configv+0xe4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d84:	4a25      	ldr	r2, [pc, #148]	; (8000e1c <_Z18SystemClock_Configv+0xe4>)
 8000d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <_Z18SystemClock_Configv+0xe4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da0:	2310      	movs	r3, #16
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da4:	2302      	movs	r3, #2
 8000da6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000da8:	2300      	movs	r3, #0
 8000daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dac:	2308      	movs	r3, #8
 8000dae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000db0:	2360      	movs	r3, #96	; 0x60
 8000db2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000db4:	2304      	movs	r3, #4
 8000db6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000db8:	2307      	movs	r3, #7
 8000dba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbc:	f107 0320 	add.w	r3, r7, #32
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 f99b 	bl	80030fc <HAL_RCC_OscConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	bf14      	ite	ne
 8000dcc:	2301      	movne	r3, #1
 8000dce:	2300      	moveq	r3, #0
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000dd6:	f000 f823 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dda:	230f      	movs	r3, #15
 8000ddc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dde:	2302      	movs	r3, #2
 8000de0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2101      	movs	r1, #1
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 fbf8 	bl	80035ec <HAL_RCC_ClockConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bf14      	ite	ne
 8000e02:	2301      	movne	r3, #1
 8000e04:	2300      	moveq	r3, #0
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000e0c:	f000 f808 	bl	8000e20 <Error_Handler>
  }
}
 8000e10:	bf00      	nop
 8000e12:	3750      	adds	r7, #80	; 0x50
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40007000 	.word	0x40007000

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x8>
	...

08000e2c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_SPI2_Init+0x5c>)
 8000e32:	4a16      	ldr	r2, [pc, #88]	; (8000e8c <MX_SPI2_Init+0x60>)
 8000e34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_SPI2_Init+0x5c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_SPI2_Init+0x5c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_SPI2_Init+0x5c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_SPI2_Init+0x5c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_SPI2_Init+0x5c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_SPI2_Init+0x5c>)
 8000e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e5a:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <MX_SPI2_Init+0x5c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_SPI2_Init+0x5c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <MX_SPI2_Init+0x5c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_SPI2_Init+0x5c>)
 8000e70:	220a      	movs	r2, #10
 8000e72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_SPI2_Init+0x5c>)
 8000e76:	f002 fdd9 	bl	8003a2c <HAL_SPI_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 8000e80:	f7ff ffce 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000290 	.word	0x20000290
 8000e8c:	40003800 	.word	0x40003800

08000e90 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <MX_SPI3_Init+0x5c>)
 8000e96:	4a16      	ldr	r2, [pc, #88]	; (8000ef0 <MX_SPI3_Init+0x60>)
 8000e98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_SPI3_Init+0x5c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <MX_SPI3_Init+0x5c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_SPI3_Init+0x5c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_SPI3_Init+0x5c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_SPI3_Init+0x5c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_SPI3_Init+0x5c>)
 8000eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ebe:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <MX_SPI3_Init+0x5c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_SPI3_Init+0x5c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <MX_SPI3_Init+0x5c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_SPI3_Init+0x5c>)
 8000ed4:	220a      	movs	r2, #10
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <MX_SPI3_Init+0x5c>)
 8000eda:	f002 fda7 	bl	8003a2c <HAL_SPI_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_SPI3_Init+0x58>
  {
    Error_Handler();
 8000ee4:	f7ff ff9c 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200002e8 	.word	0x200002e8
 8000ef0:	40003c00 	.word	0x40003c00

08000ef4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a42      	ldr	r2, [pc, #264]	; (800101c <HAL_SPI_MspInit+0x128>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d14b      	bne.n	8000fae <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	4b41      	ldr	r3, [pc, #260]	; (8001020 <HAL_SPI_MspInit+0x12c>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	4a40      	ldr	r2, [pc, #256]	; (8001020 <HAL_SPI_MspInit+0x12c>)
 8000f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f24:	6413      	str	r3, [r2, #64]	; 0x40
 8000f26:	4b3e      	ldr	r3, [pc, #248]	; (8001020 <HAL_SPI_MspInit+0x12c>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2e:	61bb      	str	r3, [r7, #24]
 8000f30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	4b3a      	ldr	r3, [pc, #232]	; (8001020 <HAL_SPI_MspInit+0x12c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a39      	ldr	r2, [pc, #228]	; (8001020 <HAL_SPI_MspInit+0x12c>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b37      	ldr	r3, [pc, #220]	; (8001020 <HAL_SPI_MspInit+0x12c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b33      	ldr	r3, [pc, #204]	; (8001020 <HAL_SPI_MspInit+0x12c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a32      	ldr	r2, [pc, #200]	; (8001020 <HAL_SPI_MspInit+0x12c>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b30      	ldr	r3, [pc, #192]	; (8001020 <HAL_SPI_MspInit+0x12c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000f6a:	230c      	movs	r3, #12
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	4619      	mov	r1, r3
 8000f84:	4827      	ldr	r0, [pc, #156]	; (8001024 <HAL_SPI_MspInit+0x130>)
 8000f86:	f001 fdbd 	bl	8002b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8000f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f9c:	2305      	movs	r3, #5
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4820      	ldr	r0, [pc, #128]	; (8001028 <HAL_SPI_MspInit+0x134>)
 8000fa8:	f001 fdac 	bl	8002b04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000fac:	e031      	b.n	8001012 <HAL_SPI_MspInit+0x11e>
  else if(spiHandle->Instance==SPI3)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a1e      	ldr	r2, [pc, #120]	; (800102c <HAL_SPI_MspInit+0x138>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d12c      	bne.n	8001012 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_SPI_MspInit+0x12c>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <HAL_SPI_MspInit+0x12c>)
 8000fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_SPI_MspInit+0x12c>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_SPI_MspInit+0x12c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	4a10      	ldr	r2, [pc, #64]	; (8001020 <HAL_SPI_MspInit+0x12c>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_SPI_MspInit+0x12c>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_SCK_Pin|SPI3_MISO_Pin|SPI3_MOSI_Pin;
 8000ff0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001002:	2306      	movs	r3, #6
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_SPI_MspInit+0x130>)
 800100e:	f001 fd79 	bl	8002b04 <HAL_GPIO_Init>
}
 8001012:	bf00      	nop
 8001014:	3730      	adds	r7, #48	; 0x30
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40003800 	.word	0x40003800
 8001020:	40023800 	.word	0x40023800
 8001024:	40020800 	.word	0x40020800
 8001028:	40020400 	.word	0x40020400
 800102c:	40003c00 	.word	0x40003c00

08001030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_MspInit+0x4c>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	4a0f      	ldr	r2, [pc, #60]	; (800107c <HAL_MspInit+0x4c>)
 8001040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001044:	6453      	str	r3, [r2, #68]	; 0x44
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <HAL_MspInit+0x4c>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_MspInit+0x4c>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_MspInit+0x4c>)
 800105c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001060:	6413      	str	r3, [r2, #64]	; 0x40
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_MspInit+0x4c>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800106e:	2007      	movs	r0, #7
 8001070:	f001 f9b2 	bl	80023d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023800 	.word	0x40023800

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <NMI_Handler+0x4>

08001086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <HardFault_Handler+0x4>

0800108c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <MemManage_Handler+0x4>

08001092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <BusFault_Handler+0x4>

08001098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <UsageFault_Handler+0x4>

0800109e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010cc:	f000 fe0e 	bl	8001cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <DMA2_Stream1_IRQHandler+0x10>)
 80010da:	f001 faa9 	bl	8002630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	2000041c 	.word	0x2000041c

080010e8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <DMA2_Stream2_IRQHandler+0x10>)
 80010ee:	f001 fa9f 	bl	8002630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000047c 	.word	0x2000047c

080010fc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <DMA2_Stream4_IRQHandler+0x10>)
 8001102:	f001 fa95 	bl	8002630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000053c 	.word	0x2000053c

08001110 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <DMA2_Stream6_IRQHandler+0x10>)
 8001116:	f001 fa8b 	bl	8002630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200004dc 	.word	0x200004dc

08001124 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
	return 1;
 8001128:	2301      	movs	r3, #1
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <_kill>:

int _kill(int pid, int sig)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800113e:	f004 f865 	bl	800520c <__errno>
 8001142:	4603      	mov	r3, r0
 8001144:	2216      	movs	r2, #22
 8001146:	601a      	str	r2, [r3, #0]
	return -1;
 8001148:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <_exit>:

void _exit (int status)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800115c:	f04f 31ff 	mov.w	r1, #4294967295
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ffe7 	bl	8001134 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001166:	e7fe      	b.n	8001166 <_exit+0x12>

08001168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001170:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <_sbrk+0x5c>)
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <_sbrk+0x60>)
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d102      	bne.n	800118a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <_sbrk+0x64>)
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <_sbrk+0x68>)
 8001188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	429a      	cmp	r2, r3
 8001196:	d207      	bcs.n	80011a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001198:	f004 f838 	bl	800520c <__errno>
 800119c:	4603      	mov	r3, r0
 800119e:	220c      	movs	r2, #12
 80011a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	e009      	b.n	80011bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <_sbrk+0x64>)
 80011b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ba:	68fb      	ldr	r3, [r7, #12]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20018000 	.word	0x20018000
 80011c8:	00000400 	.word	0x00000400
 80011cc:	20000340 	.word	0x20000340
 80011d0:	20000680 	.word	0x20000680

080011d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <SystemInit+0x20>)
 80011da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <SystemInit+0x20>)
 80011e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch3;
DMA_HandleTypeDef hdma_tim1_ch4_trig_com;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b096      	sub	sp, #88	; 0x58
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
 8001226:	615a      	str	r2, [r3, #20]
 8001228:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2220      	movs	r2, #32
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f004 f82b 	bl	800528c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001236:	4b50      	ldr	r3, [pc, #320]	; (8001378 <MX_TIM1_Init+0x180>)
 8001238:	4a50      	ldr	r2, [pc, #320]	; (800137c <MX_TIM1_Init+0x184>)
 800123a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800123c:	4b4e      	ldr	r3, [pc, #312]	; (8001378 <MX_TIM1_Init+0x180>)
 800123e:	2200      	movs	r2, #0
 8001240:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b4d      	ldr	r3, [pc, #308]	; (8001378 <MX_TIM1_Init+0x180>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 320-1;
 8001248:	4b4b      	ldr	r3, [pc, #300]	; (8001378 <MX_TIM1_Init+0x180>)
 800124a:	f240 123f 	movw	r2, #319	; 0x13f
 800124e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001250:	4b49      	ldr	r3, [pc, #292]	; (8001378 <MX_TIM1_Init+0x180>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001256:	4b48      	ldr	r3, [pc, #288]	; (8001378 <MX_TIM1_Init+0x180>)
 8001258:	2200      	movs	r2, #0
 800125a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125c:	4b46      	ldr	r3, [pc, #280]	; (8001378 <MX_TIM1_Init+0x180>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001262:	4845      	ldr	r0, [pc, #276]	; (8001378 <MX_TIM1_Init+0x180>)
 8001264:	f002 fc6b 	bl	8003b3e <HAL_TIM_Base_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800126e:	f7ff fdd7 	bl	8000e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001276:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001278:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800127c:	4619      	mov	r1, r3
 800127e:	483e      	ldr	r0, [pc, #248]	; (8001378 <MX_TIM1_Init+0x180>)
 8001280:	f002 ff6e 	bl	8004160 <HAL_TIM_ConfigClockSource>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800128a:	f7ff fdc9 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800128e:	483a      	ldr	r0, [pc, #232]	; (8001378 <MX_TIM1_Init+0x180>)
 8001290:	f002 fca4 	bl	8003bdc <HAL_TIM_PWM_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800129a:	f7ff fdc1 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012aa:	4619      	mov	r1, r3
 80012ac:	4832      	ldr	r0, [pc, #200]	; (8001378 <MX_TIM1_Init+0x180>)
 80012ae:	f003 fc09 	bl	8004ac4 <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012b8:	f7ff fdb2 	bl	8000e20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012bc:	2360      	movs	r3, #96	; 0x60
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012c8:	2300      	movs	r3, #0
 80012ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	4825      	ldr	r0, [pc, #148]	; (8001378 <MX_TIM1_Init+0x180>)
 80012e2:	f002 fe7b 	bl	8003fdc <HAL_TIM_PWM_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80012ec:	f7ff fd98 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f4:	2204      	movs	r2, #4
 80012f6:	4619      	mov	r1, r3
 80012f8:	481f      	ldr	r0, [pc, #124]	; (8001378 <MX_TIM1_Init+0x180>)
 80012fa:	f002 fe6f 	bl	8003fdc <HAL_TIM_PWM_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001304:	f7ff fd8c 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	2208      	movs	r2, #8
 800130e:	4619      	mov	r1, r3
 8001310:	4819      	ldr	r0, [pc, #100]	; (8001378 <MX_TIM1_Init+0x180>)
 8001312:	f002 fe63 	bl	8003fdc <HAL_TIM_PWM_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800131c:	f7ff fd80 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001324:	220c      	movs	r2, #12
 8001326:	4619      	mov	r1, r3
 8001328:	4813      	ldr	r0, [pc, #76]	; (8001378 <MX_TIM1_Init+0x180>)
 800132a:	f002 fe57 	bl	8003fdc <HAL_TIM_PWM_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001334:	f7ff fd74 	bl	8000e20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800134c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001350:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4619      	mov	r1, r3
 800135a:	4807      	ldr	r0, [pc, #28]	; (8001378 <MX_TIM1_Init+0x180>)
 800135c:	f003 fc20 	bl	8004ba0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001366:	f7ff fd5b 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800136a:	4803      	ldr	r0, [pc, #12]	; (8001378 <MX_TIM1_Init+0x180>)
 800136c:	f000 fa90 	bl	8001890 <HAL_TIM_MspPostInit>

}
 8001370:	bf00      	nop
 8001372:	3758      	adds	r7, #88	; 0x58
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000344 	.word	0x20000344
 800137c:	40010000 	.word	0x40010000

08001380 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001386:	f107 0318 	add.w	r3, r7, #24
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800139e:	463b      	mov	r3, r7
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013aa:	4b31      	ldr	r3, [pc, #196]	; (8001470 <MX_TIM2_Init+0xf0>)
 80013ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80013b2:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <MX_TIM2_Init+0xf0>)
 80013b4:	221f      	movs	r2, #31
 80013b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <MX_TIM2_Init+0xf0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 80013be:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <MX_TIM2_Init+0xf0>)
 80013c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c6:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <MX_TIM2_Init+0xf0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <MX_TIM2_Init+0xf0>)
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d2:	4827      	ldr	r0, [pc, #156]	; (8001470 <MX_TIM2_Init+0xf0>)
 80013d4:	f002 fbb3 	bl	8003b3e <HAL_TIM_Base_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80013de:	f7ff fd1f 	bl	8000e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013e8:	f107 0318 	add.w	r3, r7, #24
 80013ec:	4619      	mov	r1, r3
 80013ee:	4820      	ldr	r0, [pc, #128]	; (8001470 <MX_TIM2_Init+0xf0>)
 80013f0:	f002 feb6 	bl	8004160 <HAL_TIM_ConfigClockSource>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013fa:	f7ff fd11 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80013fe:	481c      	ldr	r0, [pc, #112]	; (8001470 <MX_TIM2_Init+0xf0>)
 8001400:	f002 fcf6 	bl	8003df0 <HAL_TIM_IC_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800140a:	f7ff fd09 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	4619      	mov	r1, r3
 800141c:	4814      	ldr	r0, [pc, #80]	; (8001470 <MX_TIM2_Init+0xf0>)
 800141e:	f003 fb51 	bl	8004ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001428:	f7ff fcfa 	bl	8000e20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800142c:	2300      	movs	r3, #0
 800142e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001430:	2301      	movs	r3, #1
 8001432:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	4619      	mov	r1, r3
 8001442:	480b      	ldr	r0, [pc, #44]	; (8001470 <MX_TIM2_Init+0xf0>)
 8001444:	f002 fd2d 	bl	8003ea2 <HAL_TIM_IC_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800144e:	f7ff fce7 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	2208      	movs	r2, #8
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_TIM2_Init+0xf0>)
 800145a:	f002 fd22 	bl	8003ea2 <HAL_TIM_IC_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001464:	f7ff fcdc 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	3728      	adds	r7, #40	; 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000038c 	.word	0x2000038c

08001474 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08e      	sub	sp, #56	; 0x38
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	f107 0320 	add.w	r3, r7, #32
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
 80014a0:	615a      	str	r2, [r3, #20]
 80014a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014a4:	4b3d      	ldr	r3, [pc, #244]	; (800159c <MX_TIM3_Init+0x128>)
 80014a6:	4a3e      	ldr	r2, [pc, #248]	; (80015a0 <MX_TIM3_Init+0x12c>)
 80014a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 14;
 80014aa:	4b3c      	ldr	r3, [pc, #240]	; (800159c <MX_TIM3_Init+0x128>)
 80014ac:	220e      	movs	r2, #14
 80014ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b0:	4b3a      	ldr	r3, [pc, #232]	; (800159c <MX_TIM3_Init+0x128>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64000;
 80014b6:	4b39      	ldr	r3, [pc, #228]	; (800159c <MX_TIM3_Init+0x128>)
 80014b8:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80014bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014be:	4b37      	ldr	r3, [pc, #220]	; (800159c <MX_TIM3_Init+0x128>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c4:	4b35      	ldr	r3, [pc, #212]	; (800159c <MX_TIM3_Init+0x128>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014ca:	4834      	ldr	r0, [pc, #208]	; (800159c <MX_TIM3_Init+0x128>)
 80014cc:	f002 fb37 	bl	8003b3e <HAL_TIM_Base_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80014d6:	f7ff fca3 	bl	8000e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e4:	4619      	mov	r1, r3
 80014e6:	482d      	ldr	r0, [pc, #180]	; (800159c <MX_TIM3_Init+0x128>)
 80014e8:	f002 fe3a 	bl	8004160 <HAL_TIM_ConfigClockSource>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80014f2:	f7ff fc95 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014f6:	4829      	ldr	r0, [pc, #164]	; (800159c <MX_TIM3_Init+0x128>)
 80014f8:	f002 fb70 	bl	8003bdc <HAL_TIM_PWM_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001502:	f7ff fc8d 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	4619      	mov	r1, r3
 8001514:	4821      	ldr	r0, [pc, #132]	; (800159c <MX_TIM3_Init+0x128>)
 8001516:	f003 fad5 	bl	8004ac4 <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001520:	f7ff fc7e 	bl	8000e20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001524:	2360      	movs	r3, #96	; 0x60
 8001526:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2200      	movs	r2, #0
 8001538:	4619      	mov	r1, r3
 800153a:	4818      	ldr	r0, [pc, #96]	; (800159c <MX_TIM3_Init+0x128>)
 800153c:	f002 fd4e 	bl	8003fdc <HAL_TIM_PWM_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001546:	f7ff fc6b 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2204      	movs	r2, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4812      	ldr	r0, [pc, #72]	; (800159c <MX_TIM3_Init+0x128>)
 8001552:	f002 fd43 	bl	8003fdc <HAL_TIM_PWM_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800155c:	f7ff fc60 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2208      	movs	r2, #8
 8001564:	4619      	mov	r1, r3
 8001566:	480d      	ldr	r0, [pc, #52]	; (800159c <MX_TIM3_Init+0x128>)
 8001568:	f002 fd38 	bl	8003fdc <HAL_TIM_PWM_ConfigChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001572:	f7ff fc55 	bl	8000e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	220c      	movs	r2, #12
 800157a:	4619      	mov	r1, r3
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <MX_TIM3_Init+0x128>)
 800157e:	f002 fd2d 	bl	8003fdc <HAL_TIM_PWM_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001588:	f7ff fc4a 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800158c:	4803      	ldr	r0, [pc, #12]	; (800159c <MX_TIM3_Init+0x128>)
 800158e:	f000 f97f 	bl	8001890 <HAL_TIM_MspPostInit>

}
 8001592:	bf00      	nop
 8001594:	3738      	adds	r7, #56	; 0x38
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200003d4 	.word	0x200003d4
 80015a0:	40000400 	.word	0x40000400

080015a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08c      	sub	sp, #48	; 0x30
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a99      	ldr	r2, [pc, #612]	; (8001828 <HAL_TIM_Base_MspInit+0x284>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	f040 80de 	bne.w	8001784 <HAL_TIM_Base_MspInit+0x1e0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	61bb      	str	r3, [r7, #24]
 80015cc:	4b97      	ldr	r3, [pc, #604]	; (800182c <HAL_TIM_Base_MspInit+0x288>)
 80015ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d0:	4a96      	ldr	r2, [pc, #600]	; (800182c <HAL_TIM_Base_MspInit+0x288>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6453      	str	r3, [r2, #68]	; 0x44
 80015d8:	4b94      	ldr	r3, [pc, #592]	; (800182c <HAL_TIM_Base_MspInit+0x288>)
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80015e4:	4b92      	ldr	r3, [pc, #584]	; (8001830 <HAL_TIM_Base_MspInit+0x28c>)
 80015e6:	4a93      	ldr	r2, [pc, #588]	; (8001834 <HAL_TIM_Base_MspInit+0x290>)
 80015e8:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80015ea:	4b91      	ldr	r3, [pc, #580]	; (8001830 <HAL_TIM_Base_MspInit+0x28c>)
 80015ec:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80015f0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015f2:	4b8f      	ldr	r3, [pc, #572]	; (8001830 <HAL_TIM_Base_MspInit+0x28c>)
 80015f4:	2240      	movs	r2, #64	; 0x40
 80015f6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f8:	4b8d      	ldr	r3, [pc, #564]	; (8001830 <HAL_TIM_Base_MspInit+0x28c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80015fe:	4b8c      	ldr	r3, [pc, #560]	; (8001830 <HAL_TIM_Base_MspInit+0x28c>)
 8001600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001604:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001606:	4b8a      	ldr	r3, [pc, #552]	; (8001830 <HAL_TIM_Base_MspInit+0x28c>)
 8001608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800160c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800160e:	4b88      	ldr	r3, [pc, #544]	; (8001830 <HAL_TIM_Base_MspInit+0x28c>)
 8001610:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001614:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001616:	4b86      	ldr	r3, [pc, #536]	; (8001830 <HAL_TIM_Base_MspInit+0x28c>)
 8001618:	2200      	movs	r2, #0
 800161a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800161c:	4b84      	ldr	r3, [pc, #528]	; (8001830 <HAL_TIM_Base_MspInit+0x28c>)
 800161e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001622:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001624:	4b82      	ldr	r3, [pc, #520]	; (8001830 <HAL_TIM_Base_MspInit+0x28c>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800162a:	4881      	ldr	r0, [pc, #516]	; (8001830 <HAL_TIM_Base_MspInit+0x28c>)
 800162c:	f000 ff16 	bl	800245c <HAL_DMA_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_TIM_Base_MspInit+0x96>
    {
      Error_Handler();
 8001636:	f7ff fbf3 	bl	8000e20 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a7c      	ldr	r2, [pc, #496]	; (8001830 <HAL_TIM_Base_MspInit+0x28c>)
 800163e:	625a      	str	r2, [r3, #36]	; 0x24
 8001640:	4a7b      	ldr	r2, [pc, #492]	; (8001830 <HAL_TIM_Base_MspInit+0x28c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8001646:	4b7c      	ldr	r3, [pc, #496]	; (8001838 <HAL_TIM_Base_MspInit+0x294>)
 8001648:	4a7c      	ldr	r2, [pc, #496]	; (800183c <HAL_TIM_Base_MspInit+0x298>)
 800164a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 800164c:	4b7a      	ldr	r3, [pc, #488]	; (8001838 <HAL_TIM_Base_MspInit+0x294>)
 800164e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001652:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001654:	4b78      	ldr	r3, [pc, #480]	; (8001838 <HAL_TIM_Base_MspInit+0x294>)
 8001656:	2240      	movs	r2, #64	; 0x40
 8001658:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800165a:	4b77      	ldr	r3, [pc, #476]	; (8001838 <HAL_TIM_Base_MspInit+0x294>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001660:	4b75      	ldr	r3, [pc, #468]	; (8001838 <HAL_TIM_Base_MspInit+0x294>)
 8001662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001666:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001668:	4b73      	ldr	r3, [pc, #460]	; (8001838 <HAL_TIM_Base_MspInit+0x294>)
 800166a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800166e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001670:	4b71      	ldr	r3, [pc, #452]	; (8001838 <HAL_TIM_Base_MspInit+0x294>)
 8001672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001676:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8001678:	4b6f      	ldr	r3, [pc, #444]	; (8001838 <HAL_TIM_Base_MspInit+0x294>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800167e:	4b6e      	ldr	r3, [pc, #440]	; (8001838 <HAL_TIM_Base_MspInit+0x294>)
 8001680:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001684:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001686:	4b6c      	ldr	r3, [pc, #432]	; (8001838 <HAL_TIM_Base_MspInit+0x294>)
 8001688:	2200      	movs	r2, #0
 800168a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800168c:	486a      	ldr	r0, [pc, #424]	; (8001838 <HAL_TIM_Base_MspInit+0x294>)
 800168e:	f000 fee5 	bl	800245c <HAL_DMA_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_TIM_Base_MspInit+0xf8>
    {
      Error_Handler();
 8001698:	f7ff fbc2 	bl	8000e20 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a66      	ldr	r2, [pc, #408]	; (8001838 <HAL_TIM_Base_MspInit+0x294>)
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
 80016a2:	4a65      	ldr	r2, [pc, #404]	; (8001838 <HAL_TIM_Base_MspInit+0x294>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 80016a8:	4b65      	ldr	r3, [pc, #404]	; (8001840 <HAL_TIM_Base_MspInit+0x29c>)
 80016aa:	4a66      	ldr	r2, [pc, #408]	; (8001844 <HAL_TIM_Base_MspInit+0x2a0>)
 80016ac:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 80016ae:	4b64      	ldr	r3, [pc, #400]	; (8001840 <HAL_TIM_Base_MspInit+0x29c>)
 80016b0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80016b4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016b6:	4b62      	ldr	r3, [pc, #392]	; (8001840 <HAL_TIM_Base_MspInit+0x29c>)
 80016b8:	2240      	movs	r2, #64	; 0x40
 80016ba:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80016bc:	4b60      	ldr	r3, [pc, #384]	; (8001840 <HAL_TIM_Base_MspInit+0x29c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80016c2:	4b5f      	ldr	r3, [pc, #380]	; (8001840 <HAL_TIM_Base_MspInit+0x29c>)
 80016c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ca:	4b5d      	ldr	r3, [pc, #372]	; (8001840 <HAL_TIM_Base_MspInit+0x29c>)
 80016cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016d0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016d2:	4b5b      	ldr	r3, [pc, #364]	; (8001840 <HAL_TIM_Base_MspInit+0x29c>)
 80016d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d8:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 80016da:	4b59      	ldr	r3, [pc, #356]	; (8001840 <HAL_TIM_Base_MspInit+0x29c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80016e0:	4b57      	ldr	r3, [pc, #348]	; (8001840 <HAL_TIM_Base_MspInit+0x29c>)
 80016e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016e6:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e8:	4b55      	ldr	r3, [pc, #340]	; (8001840 <HAL_TIM_Base_MspInit+0x29c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80016ee:	4854      	ldr	r0, [pc, #336]	; (8001840 <HAL_TIM_Base_MspInit+0x29c>)
 80016f0:	f000 feb4 	bl	800245c <HAL_DMA_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_TIM_Base_MspInit+0x15a>
    {
      Error_Handler();
 80016fa:	f7ff fb91 	bl	8000e20 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4f      	ldr	r2, [pc, #316]	; (8001840 <HAL_TIM_Base_MspInit+0x29c>)
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c
 8001704:	4a4e      	ldr	r2, [pc, #312]	; (8001840 <HAL_TIM_Base_MspInit+0x29c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 800170a:	4b4f      	ldr	r3, [pc, #316]	; (8001848 <HAL_TIM_Base_MspInit+0x2a4>)
 800170c:	4a4f      	ldr	r2, [pc, #316]	; (800184c <HAL_TIM_Base_MspInit+0x2a8>)
 800170e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 8001710:	4b4d      	ldr	r3, [pc, #308]	; (8001848 <HAL_TIM_Base_MspInit+0x2a4>)
 8001712:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001716:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001718:	4b4b      	ldr	r3, [pc, #300]	; (8001848 <HAL_TIM_Base_MspInit+0x2a4>)
 800171a:	2240      	movs	r2, #64	; 0x40
 800171c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800171e:	4b4a      	ldr	r3, [pc, #296]	; (8001848 <HAL_TIM_Base_MspInit+0x2a4>)
 8001720:	2200      	movs	r2, #0
 8001722:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8001724:	4b48      	ldr	r3, [pc, #288]	; (8001848 <HAL_TIM_Base_MspInit+0x2a4>)
 8001726:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800172c:	4b46      	ldr	r3, [pc, #280]	; (8001848 <HAL_TIM_Base_MspInit+0x2a4>)
 800172e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001732:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001734:	4b44      	ldr	r3, [pc, #272]	; (8001848 <HAL_TIM_Base_MspInit+0x2a4>)
 8001736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800173a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 800173c:	4b42      	ldr	r3, [pc, #264]	; (8001848 <HAL_TIM_Base_MspInit+0x2a4>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8001742:	4b41      	ldr	r3, [pc, #260]	; (8001848 <HAL_TIM_Base_MspInit+0x2a4>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001748:	4b3f      	ldr	r3, [pc, #252]	; (8001848 <HAL_TIM_Base_MspInit+0x2a4>)
 800174a:	2200      	movs	r2, #0
 800174c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 800174e:	483e      	ldr	r0, [pc, #248]	; (8001848 <HAL_TIM_Base_MspInit+0x2a4>)
 8001750:	f000 fe84 	bl	800245c <HAL_DMA_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_TIM_Base_MspInit+0x1ba>
    {
      Error_Handler();
 800175a:	f7ff fb61 	bl	8000e20 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a39      	ldr	r2, [pc, #228]	; (8001848 <HAL_TIM_Base_MspInit+0x2a4>)
 8001762:	631a      	str	r2, [r3, #48]	; 0x30
 8001764:	4a38      	ldr	r2, [pc, #224]	; (8001848 <HAL_TIM_Base_MspInit+0x2a4>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a36      	ldr	r2, [pc, #216]	; (8001848 <HAL_TIM_Base_MspInit+0x2a4>)
 800176e:	639a      	str	r2, [r3, #56]	; 0x38
 8001770:	4a35      	ldr	r2, [pc, #212]	; (8001848 <HAL_TIM_Base_MspInit+0x2a4>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a33      	ldr	r2, [pc, #204]	; (8001848 <HAL_TIM_Base_MspInit+0x2a4>)
 800177a:	635a      	str	r2, [r3, #52]	; 0x34
 800177c:	4a32      	ldr	r2, [pc, #200]	; (8001848 <HAL_TIM_Base_MspInit+0x2a4>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001782:	e07c      	b.n	800187e <HAL_TIM_Base_MspInit+0x2da>
  else if(tim_baseHandle->Instance==TIM2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800178c:	d164      	bne.n	8001858 <HAL_TIM_Base_MspInit+0x2b4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <HAL_TIM_Base_MspInit+0x288>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a25      	ldr	r2, [pc, #148]	; (800182c <HAL_TIM_Base_MspInit+0x288>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b23      	ldr	r3, [pc, #140]	; (800182c <HAL_TIM_Base_MspInit+0x288>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b1f      	ldr	r3, [pc, #124]	; (800182c <HAL_TIM_Base_MspInit+0x288>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a1e      	ldr	r2, [pc, #120]	; (800182c <HAL_TIM_Base_MspInit+0x288>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <HAL_TIM_Base_MspInit+0x288>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_TIM_Base_MspInit+0x288>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_TIM_Base_MspInit+0x288>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_TIM_Base_MspInit+0x288>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80017e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017f4:	2301      	movs	r3, #1
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4619      	mov	r1, r3
 80017fe:	4814      	ldr	r0, [pc, #80]	; (8001850 <HAL_TIM_Base_MspInit+0x2ac>)
 8001800:	f001 f980 	bl	8002b04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PPM_Pin;
 8001804:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001816:	2301      	movs	r3, #1
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PPM_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 031c 	add.w	r3, r7, #28
 800181e:	4619      	mov	r1, r3
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <HAL_TIM_Base_MspInit+0x2b0>)
 8001822:	f001 f96f 	bl	8002b04 <HAL_GPIO_Init>
}
 8001826:	e02a      	b.n	800187e <HAL_TIM_Base_MspInit+0x2da>
 8001828:	40010000 	.word	0x40010000
 800182c:	40023800 	.word	0x40023800
 8001830:	2000041c 	.word	0x2000041c
 8001834:	40026428 	.word	0x40026428
 8001838:	2000047c 	.word	0x2000047c
 800183c:	40026440 	.word	0x40026440
 8001840:	200004dc 	.word	0x200004dc
 8001844:	400264a0 	.word	0x400264a0
 8001848:	2000053c 	.word	0x2000053c
 800184c:	40026470 	.word	0x40026470
 8001850:	40020400 	.word	0x40020400
 8001854:	40020000 	.word	0x40020000
  else if(tim_baseHandle->Instance==TIM3)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_TIM_Base_MspInit+0x2e4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d10d      	bne.n	800187e <HAL_TIM_Base_MspInit+0x2da>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_TIM_Base_MspInit+0x2e8>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <HAL_TIM_Base_MspInit+0x2e8>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_TIM_Base_MspInit+0x2e8>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
}
 800187e:	bf00      	nop
 8001880:	3730      	adds	r7, #48	; 0x30
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40000400 	.word	0x40000400
 800188c:	40023800 	.word	0x40023800

08001890 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a33      	ldr	r2, [pc, #204]	; (800197c <HAL_TIM_MspPostInit+0xec>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d11f      	bne.n	80018f2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b32      	ldr	r3, [pc, #200]	; (8001980 <HAL_TIM_MspPostInit+0xf0>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a31      	ldr	r2, [pc, #196]	; (8001980 <HAL_TIM_MspPostInit+0xf0>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <HAL_TIM_MspPostInit+0xf0>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = DSHOT4_Pin|DSHOT3_Pin|DSHOT2_Pin|DSHOT1_Pin;
 80018ce:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80018d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018e0:	2301      	movs	r3, #1
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	4826      	ldr	r0, [pc, #152]	; (8001984 <HAL_TIM_MspPostInit+0xf4>)
 80018ec:	f001 f90a 	bl	8002b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018f0:	e040      	b.n	8001974 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a24      	ldr	r2, [pc, #144]	; (8001988 <HAL_TIM_MspPostInit+0xf8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d13b      	bne.n	8001974 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <HAL_TIM_MspPostInit+0xf0>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <HAL_TIM_MspPostInit+0xf0>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6313      	str	r3, [r2, #48]	; 0x30
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <HAL_TIM_MspPostInit+0xf0>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_TIM_MspPostInit+0xf0>)
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	4a17      	ldr	r2, [pc, #92]	; (8001980 <HAL_TIM_MspPostInit+0xf0>)
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	6313      	str	r3, [r2, #48]	; 0x30
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_TIM_MspPostInit+0xf0>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8001934:	23c0      	movs	r3, #192	; 0xc0
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001944:	2302      	movs	r3, #2
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	480d      	ldr	r0, [pc, #52]	; (8001984 <HAL_TIM_MspPostInit+0xf4>)
 8001950:	f001 f8d8 	bl	8002b04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin;
 8001954:	2303      	movs	r3, #3
 8001956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001964:	2302      	movs	r3, #2
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4619      	mov	r1, r3
 800196e:	4807      	ldr	r0, [pc, #28]	; (800198c <HAL_TIM_MspPostInit+0xfc>)
 8001970:	f001 f8c8 	bl	8002b04 <HAL_GPIO_Init>
}
 8001974:	bf00      	nop
 8001976:	3728      	adds	r7, #40	; 0x28
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40010000 	.word	0x40010000
 8001980:	40023800 	.word	0x40023800
 8001984:	40020000 	.word	0x40020000
 8001988:	40000400 	.word	0x40000400
 800198c:	40020400 	.word	0x40020400

08001990 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <MX_USART1_UART_Init+0x50>)
 8001998:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 800199c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_USART1_UART_Init+0x4c>)
 80019c8:	f003 f93c 	bl	8004c44 <HAL_UART_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019d2:	f7ff fa25 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2000059c 	.word	0x2000059c
 80019e0:	40011000 	.word	0x40011000

080019e4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_USART2_UART_Init+0x4c>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <MX_USART2_UART_Init+0x50>)
 80019ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <MX_USART2_UART_Init+0x4c>)
 80019f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MX_USART2_UART_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <MX_USART2_UART_Init+0x4c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <MX_USART2_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_USART2_UART_Init+0x4c>)
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <MX_USART2_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <MX_USART2_UART_Init+0x4c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_USART2_UART_Init+0x4c>)
 8001a1c:	f003 f912 	bl	8004c44 <HAL_UART_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a26:	f7ff f9fb 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200005e0 	.word	0x200005e0
 8001a34:	40004400 	.word	0x40004400

08001a38 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_USART6_UART_Init+0x4c>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <MX_USART6_UART_Init+0x50>)
 8001a40:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <MX_USART6_UART_Init+0x4c>)
 8001a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a48:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_USART6_UART_Init+0x4c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_USART6_UART_Init+0x4c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <MX_USART6_UART_Init+0x4c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_USART6_UART_Init+0x4c>)
 8001a5e:	220c      	movs	r2, #12
 8001a60:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <MX_USART6_UART_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_USART6_UART_Init+0x4c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_USART6_UART_Init+0x4c>)
 8001a70:	f003 f8e8 	bl	8004c44 <HAL_UART_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001a7a:	f7ff f9d1 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000624 	.word	0x20000624
 8001a88:	40011400 	.word	0x40011400

08001a8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08e      	sub	sp, #56	; 0x38
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a4b      	ldr	r2, [pc, #300]	; (8001bd8 <HAL_UART_MspInit+0x14c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d12c      	bne.n	8001b08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
 8001ab2:	4b4a      	ldr	r3, [pc, #296]	; (8001bdc <HAL_UART_MspInit+0x150>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	4a49      	ldr	r2, [pc, #292]	; (8001bdc <HAL_UART_MspInit+0x150>)
 8001ab8:	f043 0310 	orr.w	r3, r3, #16
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <HAL_UART_MspInit+0x150>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	623b      	str	r3, [r7, #32]
 8001ac8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
 8001ace:	4b43      	ldr	r3, [pc, #268]	; (8001bdc <HAL_UART_MspInit+0x150>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a42      	ldr	r2, [pc, #264]	; (8001bdc <HAL_UART_MspInit+0x150>)
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b40      	ldr	r3, [pc, #256]	; (8001bdc <HAL_UART_MspInit+0x150>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001ae6:	23c0      	movs	r3, #192	; 0xc0
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001af6:	2307      	movs	r3, #7
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afe:	4619      	mov	r1, r3
 8001b00:	4837      	ldr	r0, [pc, #220]	; (8001be0 <HAL_UART_MspInit+0x154>)
 8001b02:	f000 ffff 	bl	8002b04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001b06:	e062      	b.n	8001bce <HAL_UART_MspInit+0x142>
  else if(uartHandle->Instance==USART2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a35      	ldr	r2, [pc, #212]	; (8001be4 <HAL_UART_MspInit+0x158>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d12c      	bne.n	8001b6c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	4b31      	ldr	r3, [pc, #196]	; (8001bdc <HAL_UART_MspInit+0x150>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a30      	ldr	r2, [pc, #192]	; (8001bdc <HAL_UART_MspInit+0x150>)
 8001b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b2e      	ldr	r3, [pc, #184]	; (8001bdc <HAL_UART_MspInit+0x150>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	61bb      	str	r3, [r7, #24]
 8001b2c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <HAL_UART_MspInit+0x150>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a29      	ldr	r2, [pc, #164]	; (8001bdc <HAL_UART_MspInit+0x150>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <HAL_UART_MspInit+0x150>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b4a:	230c      	movs	r3, #12
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b62:	4619      	mov	r1, r3
 8001b64:	4820      	ldr	r0, [pc, #128]	; (8001be8 <HAL_UART_MspInit+0x15c>)
 8001b66:	f000 ffcd 	bl	8002b04 <HAL_GPIO_Init>
}
 8001b6a:	e030      	b.n	8001bce <HAL_UART_MspInit+0x142>
  else if(uartHandle->Instance==USART6)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a1e      	ldr	r2, [pc, #120]	; (8001bec <HAL_UART_MspInit+0x160>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d12b      	bne.n	8001bce <HAL_UART_MspInit+0x142>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_UART_MspInit+0x150>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <HAL_UART_MspInit+0x150>)
 8001b80:	f043 0320 	orr.w	r3, r3, #32
 8001b84:	6453      	str	r3, [r2, #68]	; 0x44
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_UART_MspInit+0x150>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f003 0320 	and.w	r3, r3, #32
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_UART_MspInit+0x150>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a10      	ldr	r2, [pc, #64]	; (8001bdc <HAL_UART_MspInit+0x150>)
 8001b9c:	f043 0304 	orr.w	r3, r3, #4
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <HAL_UART_MspInit+0x150>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_Pin|USART6_RX_Pin;
 8001bae:	23c0      	movs	r3, #192	; 0xc0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <HAL_UART_MspInit+0x164>)
 8001bca:	f000 ff9b 	bl	8002b04 <HAL_GPIO_Init>
}
 8001bce:	bf00      	nop
 8001bd0:	3738      	adds	r7, #56	; 0x38
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40011000 	.word	0x40011000
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020400 	.word	0x40020400
 8001be4:	40004400 	.word	0x40004400
 8001be8:	40020000 	.word	0x40020000
 8001bec:	40011400 	.word	0x40011400
 8001bf0:	40020800 	.word	0x40020800

08001bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bf8:	480d      	ldr	r0, [pc, #52]	; (8001c30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bfa:	490e      	ldr	r1, [pc, #56]	; (8001c34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bfc:	4a0e      	ldr	r2, [pc, #56]	; (8001c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c10:	4c0b      	ldr	r4, [pc, #44]	; (8001c40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c1e:	f7ff fad9 	bl	80011d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c22:	f003 faf9 	bl	8005218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c26:	f7ff f865 	bl	8000cf4 <main>
  bx  lr    
 8001c2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c38:	080055c4 	.word	0x080055c4
  ldr r2, =_sbss
 8001c3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c40:	20000680 	.word	0x20000680

08001c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c44:	e7fe      	b.n	8001c44 <ADC_IRQHandler>
	...

08001c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <HAL_Init+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <HAL_Init+0x40>)
 8001c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <HAL_Init+0x40>)
 8001c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a07      	ldr	r2, [pc, #28]	; (8001c88 <HAL_Init+0x40>)
 8001c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c70:	2003      	movs	r0, #3
 8001c72:	f000 fbb1 	bl	80023d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f000 f808 	bl	8001c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c7c:	f7ff f9d8 	bl	8001030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023c00 	.word	0x40023c00

08001c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_InitTick+0x54>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_InitTick+0x58>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 fbc9 	bl	8002442 <HAL_SYSTICK_Config>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00e      	b.n	8001cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b0f      	cmp	r3, #15
 8001cbe:	d80a      	bhi.n	8001cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f000 fb91 	bl	80023ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ccc:	4a06      	ldr	r2, [pc, #24]	; (8001ce8 <HAL_InitTick+0x5c>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e000      	b.n	8001cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	20000004 	.word	0x20000004

08001cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_IncTick+0x20>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_IncTick+0x24>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <HAL_IncTick+0x24>)
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	20000668 	.word	0x20000668

08001d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return uwTick;
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <HAL_GetTick+0x14>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000668 	.word	0x20000668

08001d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d34:	f7ff ffee 	bl	8001d14 <HAL_GetTick>
 8001d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d44:	d005      	beq.n	8001d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_Delay+0x44>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4413      	add	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d52:	bf00      	nop
 8001d54:	f7ff ffde 	bl	8001d14 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d8f7      	bhi.n	8001d54 <HAL_Delay+0x28>
  {
  }
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000008 	.word	0x20000008

08001d74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e033      	b.n	8001df2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe fe04 	bl	80009a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d118      	bne.n	8001de4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dba:	f023 0302 	bic.w	r3, r3, #2
 8001dbe:	f043 0202 	orr.w	r2, r3, #2
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f93a 	bl	8002040 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f023 0303 	bic.w	r3, r3, #3
 8001dda:	f043 0201 	orr.w	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40
 8001de2:	e001      	b.n	8001de8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x1c>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e105      	b.n	8002024 <HAL_ADC_ConfigChannel+0x228>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b09      	cmp	r3, #9
 8001e26:	d925      	bls.n	8001e74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68d9      	ldr	r1, [r3, #12]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3b1e      	subs	r3, #30
 8001e3e:	2207      	movs	r2, #7
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43da      	mvns	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	400a      	ands	r2, r1
 8001e4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68d9      	ldr	r1, [r3, #12]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	4603      	mov	r3, r0
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4403      	add	r3, r0
 8001e66:	3b1e      	subs	r3, #30
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	e022      	b.n	8001eba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6919      	ldr	r1, [r3, #16]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	2207      	movs	r2, #7
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	400a      	ands	r2, r1
 8001e96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6919      	ldr	r1, [r3, #16]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	4603      	mov	r3, r0
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4403      	add	r3, r0
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b06      	cmp	r3, #6
 8001ec0:	d824      	bhi.n	8001f0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3b05      	subs	r3, #5
 8001ed4:	221f      	movs	r2, #31
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43da      	mvns	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	400a      	ands	r2, r1
 8001ee2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	3b05      	subs	r3, #5
 8001efe:	fa00 f203 	lsl.w	r2, r0, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	635a      	str	r2, [r3, #52]	; 0x34
 8001f0a:	e04c      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b0c      	cmp	r3, #12
 8001f12:	d824      	bhi.n	8001f5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	3b23      	subs	r3, #35	; 0x23
 8001f26:	221f      	movs	r2, #31
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43da      	mvns	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	400a      	ands	r2, r1
 8001f34:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3b23      	subs	r3, #35	; 0x23
 8001f50:	fa00 f203 	lsl.w	r2, r0, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f5c:	e023      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3b41      	subs	r3, #65	; 0x41
 8001f70:	221f      	movs	r2, #31
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	3b41      	subs	r3, #65	; 0x41
 8001f9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fa6:	4b22      	ldr	r3, [pc, #136]	; (8002030 <HAL_ADC_ConfigChannel+0x234>)
 8001fa8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a21      	ldr	r2, [pc, #132]	; (8002034 <HAL_ADC_ConfigChannel+0x238>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d109      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x1cc>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b12      	cmp	r3, #18
 8001fba:	d105      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a19      	ldr	r2, [pc, #100]	; (8002034 <HAL_ADC_ConfigChannel+0x238>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d123      	bne.n	800201a <HAL_ADC_ConfigChannel+0x21e>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b10      	cmp	r3, #16
 8001fd8:	d003      	beq.n	8001fe2 <HAL_ADC_ConfigChannel+0x1e6>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b11      	cmp	r3, #17
 8001fe0:	d11b      	bne.n	800201a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b10      	cmp	r3, #16
 8001ff4:	d111      	bne.n	800201a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_ADC_ConfigChannel+0x23c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a10      	ldr	r2, [pc, #64]	; (800203c <HAL_ADC_ConfigChannel+0x240>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	0c9a      	lsrs	r2, r3, #18
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800200c:	e002      	b.n	8002014 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	3b01      	subs	r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f9      	bne.n	800200e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	40012300 	.word	0x40012300
 8002034:	40012000 	.word	0x40012000
 8002038:	20000000 	.word	0x20000000
 800203c:	431bde83 	.word	0x431bde83

08002040 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002048:	4b79      	ldr	r3, [pc, #484]	; (8002230 <ADC_Init+0x1f0>)
 800204a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	431a      	orrs	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002074:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	021a      	lsls	r2, r3, #8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002098:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6899      	ldr	r1, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	4a58      	ldr	r2, [pc, #352]	; (8002234 <ADC_Init+0x1f4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d022      	beq.n	800211e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6899      	ldr	r1, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002108:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6899      	ldr	r1, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	e00f      	b.n	800213e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800212c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800213c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0202 	bic.w	r2, r2, #2
 800214c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6899      	ldr	r1, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7e1b      	ldrb	r3, [r3, #24]
 8002158:	005a      	lsls	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01b      	beq.n	80021a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800217a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800218a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6859      	ldr	r1, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	3b01      	subs	r3, #1
 8002198:	035a      	lsls	r2, r3, #13
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	e007      	b.n	80021b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	051a      	lsls	r2, r3, #20
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6899      	ldr	r1, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021f6:	025a      	lsls	r2, r3, #9
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800220e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6899      	ldr	r1, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	029a      	lsls	r2, r3, #10
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	609a      	str	r2, [r3, #8]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40012300 	.word	0x40012300
 8002234:	0f000001 	.word	0x0f000001

08002238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226a:	4a04      	ldr	r2, [pc, #16]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	60d3      	str	r3, [r2, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <__NVIC_GetPriorityGrouping+0x18>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 0307 	and.w	r3, r3, #7
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	db0b      	blt.n	80022c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	f003 021f 	and.w	r2, r3, #31
 80022b4:	4907      	ldr	r1, [pc, #28]	; (80022d4 <__NVIC_EnableIRQ+0x38>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	2001      	movs	r0, #1
 80022be:	fa00 f202 	lsl.w	r2, r0, r2
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000e100 	.word	0xe000e100

080022d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	db0a      	blt.n	8002302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	490c      	ldr	r1, [pc, #48]	; (8002324 <__NVIC_SetPriority+0x4c>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	0112      	lsls	r2, r2, #4
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	440b      	add	r3, r1
 80022fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002300:	e00a      	b.n	8002318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4908      	ldr	r1, [pc, #32]	; (8002328 <__NVIC_SetPriority+0x50>)
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	3b04      	subs	r3, #4
 8002310:	0112      	lsls	r2, r2, #4
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	440b      	add	r3, r1
 8002316:	761a      	strb	r2, [r3, #24]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000e100 	.word	0xe000e100
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f1c3 0307 	rsb	r3, r3, #7
 8002346:	2b04      	cmp	r3, #4
 8002348:	bf28      	it	cs
 800234a:	2304      	movcs	r3, #4
 800234c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3304      	adds	r3, #4
 8002352:	2b06      	cmp	r3, #6
 8002354:	d902      	bls.n	800235c <NVIC_EncodePriority+0x30>
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3b03      	subs	r3, #3
 800235a:	e000      	b.n	800235e <NVIC_EncodePriority+0x32>
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	f04f 32ff 	mov.w	r2, #4294967295
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43da      	mvns	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	401a      	ands	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002374:	f04f 31ff 	mov.w	r1, #4294967295
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	43d9      	mvns	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	4313      	orrs	r3, r2
         );
}
 8002386:	4618      	mov	r0, r3
 8002388:	3724      	adds	r7, #36	; 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3b01      	subs	r3, #1
 80023a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a4:	d301      	bcc.n	80023aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00f      	b.n	80023ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <SysTick_Config+0x40>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b2:	210f      	movs	r1, #15
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	f7ff ff8e 	bl	80022d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <SysTick_Config+0x40>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c2:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <SysTick_Config+0x40>)
 80023c4:	2207      	movs	r2, #7
 80023c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	e000e010 	.word	0xe000e010

080023d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ff29 	bl	8002238 <__NVIC_SetPriorityGrouping>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002400:	f7ff ff3e 	bl	8002280 <__NVIC_GetPriorityGrouping>
 8002404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	6978      	ldr	r0, [r7, #20]
 800240c:	f7ff ff8e 	bl	800232c <NVIC_EncodePriority>
 8002410:	4602      	mov	r2, r0
 8002412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff5d 	bl	80022d8 <__NVIC_SetPriority>
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff31 	bl	800229c <__NVIC_EnableIRQ>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ffa2 	bl	8002394 <SysTick_Config>
 8002450:	4603      	mov	r3, r0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002468:	f7ff fc54 	bl	8001d14 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e099      	b.n	80025ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0201 	bic.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002498:	e00f      	b.n	80024ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800249a:	f7ff fc3b 	bl	8001d14 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d908      	bls.n	80024ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2220      	movs	r2, #32
 80024ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2203      	movs	r2, #3
 80024b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e078      	b.n	80025ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1e8      	bne.n	800249a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4b38      	ldr	r3, [pc, #224]	; (80025b4 <HAL_DMA_Init+0x158>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	2b04      	cmp	r3, #4
 8002512:	d107      	bne.n	8002524 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	4313      	orrs	r3, r2
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f023 0307 	bic.w	r3, r3, #7
 800253a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	4313      	orrs	r3, r2
 8002544:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	2b04      	cmp	r3, #4
 800254c:	d117      	bne.n	800257e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00e      	beq.n	800257e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 fa53 	bl	8002a0c <DMA_CheckFifoParam>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2240      	movs	r2, #64	; 0x40
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800257a:	2301      	movs	r3, #1
 800257c:	e016      	b.n	80025ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 fa0a 	bl	80029a0 <DMA_CalcBaseAndBitshift>
 800258c:	4603      	mov	r3, r0
 800258e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002594:	223f      	movs	r2, #63	; 0x3f
 8002596:	409a      	lsls	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	f010803f 	.word	0xf010803f

080025b8 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_DMA_Start+0x20>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e026      	b.n	8002626 <HAL_DMA_Start+0x6e>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d115      	bne.n	8002618 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 f99f 	bl	8002944 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0201 	orr.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e005      	b.n	8002624 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002620:	2302      	movs	r3, #2
 8002622:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8002624:	7dfb      	ldrb	r3, [r7, #23]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800263c:	4b8e      	ldr	r3, [pc, #568]	; (8002878 <HAL_DMA_IRQHandler+0x248>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a8e      	ldr	r2, [pc, #568]	; (800287c <HAL_DMA_IRQHandler+0x24c>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	0a9b      	lsrs	r3, r3, #10
 8002648:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	2208      	movs	r2, #8
 800265c:	409a      	lsls	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01a      	beq.n	800269c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d013      	beq.n	800269c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0204 	bic.w	r2, r2, #4
 8002682:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002688:	2208      	movs	r2, #8
 800268a:	409a      	lsls	r2, r3
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002694:	f043 0201 	orr.w	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	2201      	movs	r2, #1
 80026a2:	409a      	lsls	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d012      	beq.n	80026d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00b      	beq.n	80026d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	2201      	movs	r2, #1
 80026c0:	409a      	lsls	r2, r3
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ca:	f043 0202 	orr.w	r2, r3, #2
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	2204      	movs	r2, #4
 80026d8:	409a      	lsls	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d012      	beq.n	8002708 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00b      	beq.n	8002708 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	2204      	movs	r2, #4
 80026f6:	409a      	lsls	r2, r3
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002700:	f043 0204 	orr.w	r2, r3, #4
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270c:	2210      	movs	r2, #16
 800270e:	409a      	lsls	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d043      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d03c      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272a:	2210      	movs	r2, #16
 800272c:	409a      	lsls	r2, r3
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d018      	beq.n	8002772 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d108      	bne.n	8002760 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	2b00      	cmp	r3, #0
 8002754:	d024      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	4798      	blx	r3
 800275e:	e01f      	b.n	80027a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01b      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	4798      	blx	r3
 8002770:	e016      	b.n	80027a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d107      	bne.n	8002790 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0208 	bic.w	r2, r2, #8
 800278e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a4:	2220      	movs	r2, #32
 80027a6:	409a      	lsls	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 808f 	beq.w	80028d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 8087 	beq.w	80028d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c6:	2220      	movs	r2, #32
 80027c8:	409a      	lsls	r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b05      	cmp	r3, #5
 80027d8:	d136      	bne.n	8002848 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0216 	bic.w	r2, r2, #22
 80027e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <HAL_DMA_IRQHandler+0x1da>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0208 	bic.w	r2, r2, #8
 8002818:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	223f      	movs	r2, #63	; 0x3f
 8002820:	409a      	lsls	r2, r3
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283a:	2b00      	cmp	r3, #0
 800283c:	d07e      	beq.n	800293c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	4798      	blx	r3
        }
        return;
 8002846:	e079      	b.n	800293c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01d      	beq.n	8002892 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10d      	bne.n	8002880 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	2b00      	cmp	r3, #0
 800286a:	d031      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	4798      	blx	r3
 8002874:	e02c      	b.n	80028d0 <HAL_DMA_IRQHandler+0x2a0>
 8002876:	bf00      	nop
 8002878:	20000000 	.word	0x20000000
 800287c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d023      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4798      	blx	r3
 8002890:	e01e      	b.n	80028d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10f      	bne.n	80028c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0210 	bic.w	r2, r2, #16
 80028ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d032      	beq.n	800293e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d022      	beq.n	800292a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2205      	movs	r2, #5
 80028e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	3301      	adds	r3, #1
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	429a      	cmp	r2, r3
 8002906:	d307      	bcc.n	8002918 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f2      	bne.n	80028fc <HAL_DMA_IRQHandler+0x2cc>
 8002916:	e000      	b.n	800291a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002918:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
 800293a:	e000      	b.n	800293e <HAL_DMA_IRQHandler+0x30e>
        return;
 800293c:	bf00      	nop
    }
  }
}
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002960:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b40      	cmp	r3, #64	; 0x40
 8002970:	d108      	bne.n	8002984 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002982:	e007      	b.n	8002994 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	60da      	str	r2, [r3, #12]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	3b10      	subs	r3, #16
 80029b0:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <DMA_CalcBaseAndBitshift+0x64>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ba:	4a13      	ldr	r2, [pc, #76]	; (8002a08 <DMA_CalcBaseAndBitshift+0x68>)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4413      	add	r3, r2
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d909      	bls.n	80029e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029d6:	f023 0303 	bic.w	r3, r3, #3
 80029da:	1d1a      	adds	r2, r3, #4
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	659a      	str	r2, [r3, #88]	; 0x58
 80029e0:	e007      	b.n	80029f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029ea:	f023 0303 	bic.w	r3, r3, #3
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	aaaaaaab 	.word	0xaaaaaaab
 8002a08:	080055a8 	.word	0x080055a8

08002a0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d11f      	bne.n	8002a66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d856      	bhi.n	8002ada <DMA_CheckFifoParam+0xce>
 8002a2c:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <DMA_CheckFifoParam+0x28>)
 8002a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a32:	bf00      	nop
 8002a34:	08002a45 	.word	0x08002a45
 8002a38:	08002a57 	.word	0x08002a57
 8002a3c:	08002a45 	.word	0x08002a45
 8002a40:	08002adb 	.word	0x08002adb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d046      	beq.n	8002ade <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a54:	e043      	b.n	8002ade <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a5e:	d140      	bne.n	8002ae2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a64:	e03d      	b.n	8002ae2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6e:	d121      	bne.n	8002ab4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d837      	bhi.n	8002ae6 <DMA_CheckFifoParam+0xda>
 8002a76:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <DMA_CheckFifoParam+0x70>)
 8002a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7c:	08002a8d 	.word	0x08002a8d
 8002a80:	08002a93 	.word	0x08002a93
 8002a84:	08002a8d 	.word	0x08002a8d
 8002a88:	08002aa5 	.word	0x08002aa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a90:	e030      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d025      	beq.n	8002aea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa2:	e022      	b.n	8002aea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aac:	d11f      	bne.n	8002aee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ab2:	e01c      	b.n	8002aee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d903      	bls.n	8002ac2 <DMA_CheckFifoParam+0xb6>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d003      	beq.n	8002ac8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ac0:	e018      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac6:	e015      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00e      	beq.n	8002af2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad8:	e00b      	b.n	8002af2 <DMA_CheckFifoParam+0xe6>
      break;
 8002ada:	bf00      	nop
 8002adc:	e00a      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e008      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae2:	bf00      	nop
 8002ae4:	e006      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae6:	bf00      	nop
 8002ae8:	e004      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002aea:	bf00      	nop
 8002aec:	e002      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002aee:	bf00      	nop
 8002af0:	e000      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002af2:	bf00      	nop
    }
  } 
  
  return status; 
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop

08002b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	; 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	e159      	b.n	8002dd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b20:	2201      	movs	r2, #1
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	f040 8148 	bne.w	8002dce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d005      	beq.n	8002b56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d130      	bne.n	8002bb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	2203      	movs	r2, #3
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 0201 	and.w	r2, r3, #1
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d017      	beq.n	8002bf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	2203      	movs	r2, #3
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d123      	bne.n	8002c48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	08da      	lsrs	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3208      	adds	r2, #8
 8002c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	220f      	movs	r2, #15
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	08da      	lsrs	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3208      	adds	r2, #8
 8002c42:	69b9      	ldr	r1, [r7, #24]
 8002c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	2203      	movs	r2, #3
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0203 	and.w	r2, r3, #3
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80a2 	beq.w	8002dce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	4b57      	ldr	r3, [pc, #348]	; (8002dec <HAL_GPIO_Init+0x2e8>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	4a56      	ldr	r2, [pc, #344]	; (8002dec <HAL_GPIO_Init+0x2e8>)
 8002c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c98:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9a:	4b54      	ldr	r3, [pc, #336]	; (8002dec <HAL_GPIO_Init+0x2e8>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ca6:	4a52      	ldr	r2, [pc, #328]	; (8002df0 <HAL_GPIO_Init+0x2ec>)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	089b      	lsrs	r3, r3, #2
 8002cac:	3302      	adds	r3, #2
 8002cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	220f      	movs	r2, #15
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a49      	ldr	r2, [pc, #292]	; (8002df4 <HAL_GPIO_Init+0x2f0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d019      	beq.n	8002d06 <HAL_GPIO_Init+0x202>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a48      	ldr	r2, [pc, #288]	; (8002df8 <HAL_GPIO_Init+0x2f4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <HAL_GPIO_Init+0x1fe>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a47      	ldr	r2, [pc, #284]	; (8002dfc <HAL_GPIO_Init+0x2f8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00d      	beq.n	8002cfe <HAL_GPIO_Init+0x1fa>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a46      	ldr	r2, [pc, #280]	; (8002e00 <HAL_GPIO_Init+0x2fc>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d007      	beq.n	8002cfa <HAL_GPIO_Init+0x1f6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a45      	ldr	r2, [pc, #276]	; (8002e04 <HAL_GPIO_Init+0x300>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <HAL_GPIO_Init+0x1f2>
 8002cf2:	2304      	movs	r3, #4
 8002cf4:	e008      	b.n	8002d08 <HAL_GPIO_Init+0x204>
 8002cf6:	2307      	movs	r3, #7
 8002cf8:	e006      	b.n	8002d08 <HAL_GPIO_Init+0x204>
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e004      	b.n	8002d08 <HAL_GPIO_Init+0x204>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e002      	b.n	8002d08 <HAL_GPIO_Init+0x204>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <HAL_GPIO_Init+0x204>
 8002d06:	2300      	movs	r3, #0
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	f002 0203 	and.w	r2, r2, #3
 8002d0e:	0092      	lsls	r2, r2, #2
 8002d10:	4093      	lsls	r3, r2
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d18:	4935      	ldr	r1, [pc, #212]	; (8002df0 <HAL_GPIO_Init+0x2ec>)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	089b      	lsrs	r3, r3, #2
 8002d1e:	3302      	adds	r3, #2
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d26:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d4a:	4a2f      	ldr	r2, [pc, #188]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d50:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d74:	4a24      	ldr	r2, [pc, #144]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d7a:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d9e:	4a1a      	ldr	r2, [pc, #104]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da4:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dc8:	4a0f      	ldr	r2, [pc, #60]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2b0f      	cmp	r3, #15
 8002dd8:	f67f aea2 	bls.w	8002b20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	3724      	adds	r7, #36	; 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40013800 	.word	0x40013800
 8002df4:	40020000 	.word	0x40020000
 8002df8:	40020400 	.word	0x40020400
 8002dfc:	40020800 	.word	0x40020800
 8002e00:	40020c00 	.word	0x40020c00
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40013c00 	.word	0x40013c00

08002e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	807b      	strh	r3, [r7, #2]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e1c:	787b      	ldrb	r3, [r7, #1]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e22:	887a      	ldrh	r2, [r7, #2]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e28:	e003      	b.n	8002e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e2a:	887b      	ldrh	r3, [r7, #2]
 8002e2c:	041a      	lsls	r2, r3, #16
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	619a      	str	r2, [r3, #24]
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e50:	887a      	ldrh	r2, [r7, #2]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4013      	ands	r3, r2
 8002e56:	041a      	lsls	r2, r3, #16
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	43d9      	mvns	r1, r3
 8002e5c:	887b      	ldrh	r3, [r7, #2]
 8002e5e:	400b      	ands	r3, r1
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	619a      	str	r2, [r3, #24]
}
 8002e66:	bf00      	nop
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e12b      	b.n	80030de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd fee2 	bl	8000c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2224      	movs	r2, #36	; 0x24
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0201 	bic.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ec6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ed8:	f000 fd80 	bl	80039dc <HAL_RCC_GetPCLK1Freq>
 8002edc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4a81      	ldr	r2, [pc, #516]	; (80030e8 <HAL_I2C_Init+0x274>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d807      	bhi.n	8002ef8 <HAL_I2C_Init+0x84>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4a80      	ldr	r2, [pc, #512]	; (80030ec <HAL_I2C_Init+0x278>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	bf94      	ite	ls
 8002ef0:	2301      	movls	r3, #1
 8002ef2:	2300      	movhi	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	e006      	b.n	8002f06 <HAL_I2C_Init+0x92>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a7d      	ldr	r2, [pc, #500]	; (80030f0 <HAL_I2C_Init+0x27c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	bf94      	ite	ls
 8002f00:	2301      	movls	r3, #1
 8002f02:	2300      	movhi	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e0e7      	b.n	80030de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4a78      	ldr	r2, [pc, #480]	; (80030f4 <HAL_I2C_Init+0x280>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	0c9b      	lsrs	r3, r3, #18
 8002f18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	4a6a      	ldr	r2, [pc, #424]	; (80030e8 <HAL_I2C_Init+0x274>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d802      	bhi.n	8002f48 <HAL_I2C_Init+0xd4>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	3301      	adds	r3, #1
 8002f46:	e009      	b.n	8002f5c <HAL_I2C_Init+0xe8>
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f4e:	fb02 f303 	mul.w	r3, r2, r3
 8002f52:	4a69      	ldr	r2, [pc, #420]	; (80030f8 <HAL_I2C_Init+0x284>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	099b      	lsrs	r3, r3, #6
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	495c      	ldr	r1, [pc, #368]	; (80030e8 <HAL_I2C_Init+0x274>)
 8002f78:	428b      	cmp	r3, r1
 8002f7a:	d819      	bhi.n	8002fb0 <HAL_I2C_Init+0x13c>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1e59      	subs	r1, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f8a:	1c59      	adds	r1, r3, #1
 8002f8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f90:	400b      	ands	r3, r1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_I2C_Init+0x138>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1e59      	subs	r1, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002faa:	e051      	b.n	8003050 <HAL_I2C_Init+0x1dc>
 8002fac:	2304      	movs	r3, #4
 8002fae:	e04f      	b.n	8003050 <HAL_I2C_Init+0x1dc>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d111      	bne.n	8002fdc <HAL_I2C_Init+0x168>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e58      	subs	r0, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	440b      	add	r3, r1
 8002fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fca:	3301      	adds	r3, #1
 8002fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e012      	b.n	8003002 <HAL_I2C_Init+0x18e>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	1e58      	subs	r0, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	0099      	lsls	r1, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2301      	moveq	r3, #1
 8002ffe:	2300      	movne	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_I2C_Init+0x196>
 8003006:	2301      	movs	r3, #1
 8003008:	e022      	b.n	8003050 <HAL_I2C_Init+0x1dc>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10e      	bne.n	8003030 <HAL_I2C_Init+0x1bc>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1e58      	subs	r0, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6859      	ldr	r1, [r3, #4]
 800301a:	460b      	mov	r3, r1
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	440b      	add	r3, r1
 8003020:	fbb0 f3f3 	udiv	r3, r0, r3
 8003024:	3301      	adds	r3, #1
 8003026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800302e:	e00f      	b.n	8003050 <HAL_I2C_Init+0x1dc>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1e58      	subs	r0, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	0099      	lsls	r1, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	fbb0 f3f3 	udiv	r3, r0, r3
 8003046:	3301      	adds	r3, #1
 8003048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	6809      	ldr	r1, [r1, #0]
 8003054:	4313      	orrs	r3, r2
 8003056:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69da      	ldr	r2, [r3, #28]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800307e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6911      	ldr	r1, [r2, #16]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68d2      	ldr	r2, [r2, #12]
 800308a:	4311      	orrs	r1, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	430b      	orrs	r3, r1
 8003092:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	000186a0 	.word	0x000186a0
 80030ec:	001e847f 	.word	0x001e847f
 80030f0:	003d08ff 	.word	0x003d08ff
 80030f4:	431bde83 	.word	0x431bde83
 80030f8:	10624dd3 	.word	0x10624dd3

080030fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e267      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d075      	beq.n	8003206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800311a:	4b88      	ldr	r3, [pc, #544]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b04      	cmp	r3, #4
 8003124:	d00c      	beq.n	8003140 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003126:	4b85      	ldr	r3, [pc, #532]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800312e:	2b08      	cmp	r3, #8
 8003130:	d112      	bne.n	8003158 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003132:	4b82      	ldr	r3, [pc, #520]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800313e:	d10b      	bne.n	8003158 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	4b7e      	ldr	r3, [pc, #504]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d05b      	beq.n	8003204 <HAL_RCC_OscConfig+0x108>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d157      	bne.n	8003204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e242      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003160:	d106      	bne.n	8003170 <HAL_RCC_OscConfig+0x74>
 8003162:	4b76      	ldr	r3, [pc, #472]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a75      	ldr	r2, [pc, #468]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e01d      	b.n	80031ac <HAL_RCC_OscConfig+0xb0>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0x98>
 800317a:	4b70      	ldr	r3, [pc, #448]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a6f      	ldr	r2, [pc, #444]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b6d      	ldr	r3, [pc, #436]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a6c      	ldr	r2, [pc, #432]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0xb0>
 8003194:	4b69      	ldr	r3, [pc, #420]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a68      	ldr	r2, [pc, #416]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800319a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b66      	ldr	r3, [pc, #408]	; (800333c <HAL_RCC_OscConfig+0x240>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a65      	ldr	r2, [pc, #404]	; (800333c <HAL_RCC_OscConfig+0x240>)
 80031a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fe fdae 	bl	8001d14 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031bc:	f7fe fdaa 	bl	8001d14 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e207      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	4b5b      	ldr	r3, [pc, #364]	; (800333c <HAL_RCC_OscConfig+0x240>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0xc0>
 80031da:	e014      	b.n	8003206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fe fd9a 	bl	8001d14 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e4:	f7fe fd96 	bl	8001d14 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e1f3      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f6:	4b51      	ldr	r3, [pc, #324]	; (800333c <HAL_RCC_OscConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0xe8>
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d063      	beq.n	80032da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003212:	4b4a      	ldr	r3, [pc, #296]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800321e:	4b47      	ldr	r3, [pc, #284]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003226:	2b08      	cmp	r3, #8
 8003228:	d11c      	bne.n	8003264 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800322a:	4b44      	ldr	r3, [pc, #272]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d116      	bne.n	8003264 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	4b41      	ldr	r3, [pc, #260]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_RCC_OscConfig+0x152>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d001      	beq.n	800324e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e1c7      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324e:	4b3b      	ldr	r3, [pc, #236]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4937      	ldr	r1, [pc, #220]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003262:	e03a      	b.n	80032da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d020      	beq.n	80032ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326c:	4b34      	ldr	r3, [pc, #208]	; (8003340 <HAL_RCC_OscConfig+0x244>)
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003272:	f7fe fd4f 	bl	8001d14 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800327a:	f7fe fd4b 	bl	8001d14 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e1a8      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328c:	4b2b      	ldr	r3, [pc, #172]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003298:	4b28      	ldr	r3, [pc, #160]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4925      	ldr	r1, [pc, #148]	; (800333c <HAL_RCC_OscConfig+0x240>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]
 80032ac:	e015      	b.n	80032da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ae:	4b24      	ldr	r3, [pc, #144]	; (8003340 <HAL_RCC_OscConfig+0x244>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fe fd2e 	bl	8001d14 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032bc:	f7fe fd2a 	bl	8001d14 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e187      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	4b1b      	ldr	r3, [pc, #108]	; (800333c <HAL_RCC_OscConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d036      	beq.n	8003354 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d016      	beq.n	800331c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ee:	4b15      	ldr	r3, [pc, #84]	; (8003344 <HAL_RCC_OscConfig+0x248>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7fe fd0e 	bl	8001d14 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032fc:	f7fe fd0a 	bl	8001d14 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e167      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x200>
 800331a:	e01b      	b.n	8003354 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800331c:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_RCC_OscConfig+0x248>)
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003322:	f7fe fcf7 	bl	8001d14 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003328:	e00e      	b.n	8003348 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800332a:	f7fe fcf3 	bl	8001d14 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d907      	bls.n	8003348 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e150      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
 800333c:	40023800 	.word	0x40023800
 8003340:	42470000 	.word	0x42470000
 8003344:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003348:	4b88      	ldr	r3, [pc, #544]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800334a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1ea      	bne.n	800332a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8097 	beq.w	8003490 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003362:	2300      	movs	r3, #0
 8003364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003366:	4b81      	ldr	r3, [pc, #516]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10f      	bne.n	8003392 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	4b7d      	ldr	r3, [pc, #500]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	4a7c      	ldr	r2, [pc, #496]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800337c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003380:	6413      	str	r3, [r2, #64]	; 0x40
 8003382:	4b7a      	ldr	r3, [pc, #488]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800338e:	2301      	movs	r3, #1
 8003390:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003392:	4b77      	ldr	r3, [pc, #476]	; (8003570 <HAL_RCC_OscConfig+0x474>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d118      	bne.n	80033d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800339e:	4b74      	ldr	r3, [pc, #464]	; (8003570 <HAL_RCC_OscConfig+0x474>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a73      	ldr	r2, [pc, #460]	; (8003570 <HAL_RCC_OscConfig+0x474>)
 80033a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033aa:	f7fe fcb3 	bl	8001d14 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b2:	f7fe fcaf 	bl	8001d14 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e10c      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c4:	4b6a      	ldr	r3, [pc, #424]	; (8003570 <HAL_RCC_OscConfig+0x474>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d106      	bne.n	80033e6 <HAL_RCC_OscConfig+0x2ea>
 80033d8:	4b64      	ldr	r3, [pc, #400]	; (800356c <HAL_RCC_OscConfig+0x470>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	4a63      	ldr	r2, [pc, #396]	; (800356c <HAL_RCC_OscConfig+0x470>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6713      	str	r3, [r2, #112]	; 0x70
 80033e4:	e01c      	b.n	8003420 <HAL_RCC_OscConfig+0x324>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b05      	cmp	r3, #5
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0x30c>
 80033ee:	4b5f      	ldr	r3, [pc, #380]	; (800356c <HAL_RCC_OscConfig+0x470>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a5e      	ldr	r2, [pc, #376]	; (800356c <HAL_RCC_OscConfig+0x470>)
 80033f4:	f043 0304 	orr.w	r3, r3, #4
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
 80033fa:	4b5c      	ldr	r3, [pc, #368]	; (800356c <HAL_RCC_OscConfig+0x470>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	4a5b      	ldr	r2, [pc, #364]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	6713      	str	r3, [r2, #112]	; 0x70
 8003406:	e00b      	b.n	8003420 <HAL_RCC_OscConfig+0x324>
 8003408:	4b58      	ldr	r3, [pc, #352]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	4a57      	ldr	r2, [pc, #348]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	6713      	str	r3, [r2, #112]	; 0x70
 8003414:	4b55      	ldr	r3, [pc, #340]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	4a54      	ldr	r2, [pc, #336]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800341a:	f023 0304 	bic.w	r3, r3, #4
 800341e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d015      	beq.n	8003454 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003428:	f7fe fc74 	bl	8001d14 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342e:	e00a      	b.n	8003446 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003430:	f7fe fc70 	bl	8001d14 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	f241 3288 	movw	r2, #5000	; 0x1388
 800343e:	4293      	cmp	r3, r2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e0cb      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003446:	4b49      	ldr	r3, [pc, #292]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0ee      	beq.n	8003430 <HAL_RCC_OscConfig+0x334>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003454:	f7fe fc5e 	bl	8001d14 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345a:	e00a      	b.n	8003472 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800345c:	f7fe fc5a 	bl	8001d14 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e0b5      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003472:	4b3e      	ldr	r3, [pc, #248]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1ee      	bne.n	800345c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800347e:	7dfb      	ldrb	r3, [r7, #23]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d105      	bne.n	8003490 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003484:	4b39      	ldr	r3, [pc, #228]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	4a38      	ldr	r2, [pc, #224]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800348a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800348e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80a1 	beq.w	80035dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800349a:	4b34      	ldr	r3, [pc, #208]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d05c      	beq.n	8003560 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d141      	bne.n	8003532 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ae:	4b31      	ldr	r3, [pc, #196]	; (8003574 <HAL_RCC_OscConfig+0x478>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fe fc2e 	bl	8001d14 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034bc:	f7fe fc2a 	bl	8001d14 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e087      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ce:	4b27      	ldr	r3, [pc, #156]	; (800356c <HAL_RCC_OscConfig+0x470>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69da      	ldr	r2, [r3, #28]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	019b      	lsls	r3, r3, #6
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	085b      	lsrs	r3, r3, #1
 80034f2:	3b01      	subs	r3, #1
 80034f4:	041b      	lsls	r3, r3, #16
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	061b      	lsls	r3, r3, #24
 80034fe:	491b      	ldr	r1, [pc, #108]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003500:	4313      	orrs	r3, r2
 8003502:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003504:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <HAL_RCC_OscConfig+0x478>)
 8003506:	2201      	movs	r2, #1
 8003508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350a:	f7fe fc03 	bl	8001d14 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003512:	f7fe fbff 	bl	8001d14 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e05c      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003524:	4b11      	ldr	r3, [pc, #68]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x416>
 8003530:	e054      	b.n	80035dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <HAL_RCC_OscConfig+0x478>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003538:	f7fe fbec 	bl	8001d14 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003540:	f7fe fbe8 	bl	8001d14 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e045      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x444>
 800355e:	e03d      	b.n	80035dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d107      	bne.n	8003578 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e038      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
 800356c:	40023800 	.word	0x40023800
 8003570:	40007000 	.word	0x40007000
 8003574:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003578:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <HAL_RCC_OscConfig+0x4ec>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d028      	beq.n	80035d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d121      	bne.n	80035d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359e:	429a      	cmp	r2, r3
 80035a0:	d11a      	bne.n	80035d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035a8:	4013      	ands	r3, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d111      	bne.n	80035d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	085b      	lsrs	r3, r3, #1
 80035c0:	3b01      	subs	r3, #1
 80035c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d107      	bne.n	80035d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40023800 	.word	0x40023800

080035ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0cc      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003600:	4b68      	ldr	r3, [pc, #416]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d90c      	bls.n	8003628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360e:	4b65      	ldr	r3, [pc, #404]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0b8      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d020      	beq.n	8003676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003640:	4b59      	ldr	r3, [pc, #356]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4a58      	ldr	r2, [pc, #352]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800364a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003658:	4b53      	ldr	r3, [pc, #332]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4a52      	ldr	r2, [pc, #328]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003664:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	494d      	ldr	r1, [pc, #308]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d044      	beq.n	800370c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d107      	bne.n	800369a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368a:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d119      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e07f      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d003      	beq.n	80036aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036aa:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e06f      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ba:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e067      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ca:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f023 0203 	bic.w	r2, r3, #3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4934      	ldr	r1, [pc, #208]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036dc:	f7fe fb1a 	bl	8001d14 <HAL_GetTick>
 80036e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e2:	e00a      	b.n	80036fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e4:	f7fe fb16 	bl	8001d14 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e04f      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fa:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 020c 	and.w	r2, r3, #12
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	429a      	cmp	r2, r3
 800370a:	d1eb      	bne.n	80036e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800370c:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d20c      	bcs.n	8003734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003722:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d001      	beq.n	8003734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e032      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003740:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	4916      	ldr	r1, [pc, #88]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d009      	beq.n	8003772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	490e      	ldr	r1, [pc, #56]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003772:	f000 f821 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 8003776:	4602      	mov	r2, r0
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	490a      	ldr	r1, [pc, #40]	; (80037ac <HAL_RCC_ClockConfig+0x1c0>)
 8003784:	5ccb      	ldrb	r3, [r1, r3]
 8003786:	fa22 f303 	lsr.w	r3, r2, r3
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe fa7a 	bl	8001c8c <HAL_InitTick>

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40023c00 	.word	0x40023c00
 80037a8:	40023800 	.word	0x40023800
 80037ac:	08005590 	.word	0x08005590
 80037b0:	20000000 	.word	0x20000000
 80037b4:	20000004 	.word	0x20000004

080037b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037bc:	b094      	sub	sp, #80	; 0x50
 80037be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	647b      	str	r3, [r7, #68]	; 0x44
 80037c4:	2300      	movs	r3, #0
 80037c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037c8:	2300      	movs	r3, #0
 80037ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037d0:	4b79      	ldr	r3, [pc, #484]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d00d      	beq.n	80037f8 <HAL_RCC_GetSysClockFreq+0x40>
 80037dc:	2b08      	cmp	r3, #8
 80037de:	f200 80e1 	bhi.w	80039a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0x34>
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d003      	beq.n	80037f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ea:	e0db      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037ec:	4b73      	ldr	r3, [pc, #460]	; (80039bc <HAL_RCC_GetSysClockFreq+0x204>)
 80037ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80037f0:	e0db      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037f2:	4b73      	ldr	r3, [pc, #460]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80037f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037f6:	e0d8      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037f8:	4b6f      	ldr	r3, [pc, #444]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003800:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003802:	4b6d      	ldr	r3, [pc, #436]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d063      	beq.n	80038d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800380e:	4b6a      	ldr	r3, [pc, #424]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	099b      	lsrs	r3, r3, #6
 8003814:	2200      	movs	r2, #0
 8003816:	63bb      	str	r3, [r7, #56]	; 0x38
 8003818:	63fa      	str	r2, [r7, #60]	; 0x3c
 800381a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003820:	633b      	str	r3, [r7, #48]	; 0x30
 8003822:	2300      	movs	r3, #0
 8003824:	637b      	str	r3, [r7, #52]	; 0x34
 8003826:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800382a:	4622      	mov	r2, r4
 800382c:	462b      	mov	r3, r5
 800382e:	f04f 0000 	mov.w	r0, #0
 8003832:	f04f 0100 	mov.w	r1, #0
 8003836:	0159      	lsls	r1, r3, #5
 8003838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800383c:	0150      	lsls	r0, r2, #5
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4621      	mov	r1, r4
 8003844:	1a51      	subs	r1, r2, r1
 8003846:	6139      	str	r1, [r7, #16]
 8003848:	4629      	mov	r1, r5
 800384a:	eb63 0301 	sbc.w	r3, r3, r1
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800385c:	4659      	mov	r1, fp
 800385e:	018b      	lsls	r3, r1, #6
 8003860:	4651      	mov	r1, sl
 8003862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003866:	4651      	mov	r1, sl
 8003868:	018a      	lsls	r2, r1, #6
 800386a:	4651      	mov	r1, sl
 800386c:	ebb2 0801 	subs.w	r8, r2, r1
 8003870:	4659      	mov	r1, fp
 8003872:	eb63 0901 	sbc.w	r9, r3, r1
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003882:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003886:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800388a:	4690      	mov	r8, r2
 800388c:	4699      	mov	r9, r3
 800388e:	4623      	mov	r3, r4
 8003890:	eb18 0303 	adds.w	r3, r8, r3
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	462b      	mov	r3, r5
 8003898:	eb49 0303 	adc.w	r3, r9, r3
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038aa:	4629      	mov	r1, r5
 80038ac:	024b      	lsls	r3, r1, #9
 80038ae:	4621      	mov	r1, r4
 80038b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038b4:	4621      	mov	r1, r4
 80038b6:	024a      	lsls	r2, r1, #9
 80038b8:	4610      	mov	r0, r2
 80038ba:	4619      	mov	r1, r3
 80038bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038be:	2200      	movs	r2, #0
 80038c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038c8:	f7fc fc84 	bl	80001d4 <__aeabi_uldivmod>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4613      	mov	r3, r2
 80038d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d4:	e058      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038d6:	4b38      	ldr	r3, [pc, #224]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	099b      	lsrs	r3, r3, #6
 80038dc:	2200      	movs	r2, #0
 80038de:	4618      	mov	r0, r3
 80038e0:	4611      	mov	r1, r2
 80038e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038e6:	623b      	str	r3, [r7, #32]
 80038e8:	2300      	movs	r3, #0
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
 80038ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038f0:	4642      	mov	r2, r8
 80038f2:	464b      	mov	r3, r9
 80038f4:	f04f 0000 	mov.w	r0, #0
 80038f8:	f04f 0100 	mov.w	r1, #0
 80038fc:	0159      	lsls	r1, r3, #5
 80038fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003902:	0150      	lsls	r0, r2, #5
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4641      	mov	r1, r8
 800390a:	ebb2 0a01 	subs.w	sl, r2, r1
 800390e:	4649      	mov	r1, r9
 8003910:	eb63 0b01 	sbc.w	fp, r3, r1
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003920:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003924:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003928:	ebb2 040a 	subs.w	r4, r2, sl
 800392c:	eb63 050b 	sbc.w	r5, r3, fp
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	00eb      	lsls	r3, r5, #3
 800393a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800393e:	00e2      	lsls	r2, r4, #3
 8003940:	4614      	mov	r4, r2
 8003942:	461d      	mov	r5, r3
 8003944:	4643      	mov	r3, r8
 8003946:	18e3      	adds	r3, r4, r3
 8003948:	603b      	str	r3, [r7, #0]
 800394a:	464b      	mov	r3, r9
 800394c:	eb45 0303 	adc.w	r3, r5, r3
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800395e:	4629      	mov	r1, r5
 8003960:	028b      	lsls	r3, r1, #10
 8003962:	4621      	mov	r1, r4
 8003964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003968:	4621      	mov	r1, r4
 800396a:	028a      	lsls	r2, r1, #10
 800396c:	4610      	mov	r0, r2
 800396e:	4619      	mov	r1, r3
 8003970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003972:	2200      	movs	r2, #0
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	61fa      	str	r2, [r7, #28]
 8003978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800397c:	f7fc fc2a 	bl	80001d4 <__aeabi_uldivmod>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4613      	mov	r3, r2
 8003986:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	0c1b      	lsrs	r3, r3, #16
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	3301      	adds	r3, #1
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003998:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800399a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800399c:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039a2:	e002      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCC_GetSysClockFreq+0x204>)
 80039a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3750      	adds	r7, #80	; 0x50
 80039b0:	46bd      	mov	sp, r7
 80039b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039b6:	bf00      	nop
 80039b8:	40023800 	.word	0x40023800
 80039bc:	00f42400 	.word	0x00f42400
 80039c0:	007a1200 	.word	0x007a1200

080039c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039ca:	681b      	ldr	r3, [r3, #0]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	20000000 	.word	0x20000000

080039dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039e0:	f7ff fff0 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	0a9b      	lsrs	r3, r3, #10
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4903      	ldr	r1, [pc, #12]	; (8003a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40023800 	.word	0x40023800
 8003a00:	080055a0 	.word	0x080055a0

08003a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a08:	f7ff ffdc 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	0b5b      	lsrs	r3, r3, #13
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4903      	ldr	r1, [pc, #12]	; (8003a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40023800 	.word	0x40023800
 8003a28:	080055a0 	.word	0x080055a0

08003a2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e07b      	b.n	8003b36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d108      	bne.n	8003a58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a4e:	d009      	beq.n	8003a64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	61da      	str	r2, [r3, #28]
 8003a56:	e005      	b.n	8003a64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fd fa38 	bl	8000ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae8:	ea42 0103 	orr.w	r1, r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	0c1b      	lsrs	r3, r3, #16
 8003b02:	f003 0104 	and.w	r1, r3, #4
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	f003 0210 	and.w	r2, r3, #16
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e041      	b.n	8003bd4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7fd fd1d 	bl	80015a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f000 fbb7 	bl	80042f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e041      	b.n	8003c72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f839 	bl	8003c7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f000 fb68 	bl	80042f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d109      	bne.n	8003cb4 <HAL_TIM_PWM_Start+0x24>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	bf14      	ite	ne
 8003cac:	2301      	movne	r3, #1
 8003cae:	2300      	moveq	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	e022      	b.n	8003cfa <HAL_TIM_PWM_Start+0x6a>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d109      	bne.n	8003cce <HAL_TIM_PWM_Start+0x3e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	bf14      	ite	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	2300      	moveq	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	e015      	b.n	8003cfa <HAL_TIM_PWM_Start+0x6a>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d109      	bne.n	8003ce8 <HAL_TIM_PWM_Start+0x58>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	bf14      	ite	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	2300      	moveq	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	e008      	b.n	8003cfa <HAL_TIM_PWM_Start+0x6a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	bf14      	ite	ne
 8003cf4:	2301      	movne	r3, #1
 8003cf6:	2300      	moveq	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e068      	b.n	8003dd4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d104      	bne.n	8003d12 <HAL_TIM_PWM_Start+0x82>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d10:	e013      	b.n	8003d3a <HAL_TIM_PWM_Start+0xaa>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d104      	bne.n	8003d22 <HAL_TIM_PWM_Start+0x92>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d20:	e00b      	b.n	8003d3a <HAL_TIM_PWM_Start+0xaa>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d104      	bne.n	8003d32 <HAL_TIM_PWM_Start+0xa2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d30:	e003      	b.n	8003d3a <HAL_TIM_PWM_Start+0xaa>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2202      	movs	r2, #2
 8003d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	6839      	ldr	r1, [r7, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fe98 	bl	8004a78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a23      	ldr	r2, [pc, #140]	; (8003ddc <HAL_TIM_PWM_Start+0x14c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d107      	bne.n	8003d62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <HAL_TIM_PWM_Start+0x14c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d018      	beq.n	8003d9e <HAL_TIM_PWM_Start+0x10e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d74:	d013      	beq.n	8003d9e <HAL_TIM_PWM_Start+0x10e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <HAL_TIM_PWM_Start+0x150>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00e      	beq.n	8003d9e <HAL_TIM_PWM_Start+0x10e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <HAL_TIM_PWM_Start+0x154>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d009      	beq.n	8003d9e <HAL_TIM_PWM_Start+0x10e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a16      	ldr	r2, [pc, #88]	; (8003de8 <HAL_TIM_PWM_Start+0x158>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d004      	beq.n	8003d9e <HAL_TIM_PWM_Start+0x10e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a14      	ldr	r2, [pc, #80]	; (8003dec <HAL_TIM_PWM_Start+0x15c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d111      	bne.n	8003dc2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b06      	cmp	r3, #6
 8003dae:	d010      	beq.n	8003dd2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc0:	e007      	b.n	8003dd2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40010000 	.word	0x40010000
 8003de0:	40000400 	.word	0x40000400
 8003de4:	40000800 	.word	0x40000800
 8003de8:	40000c00 	.word	0x40000c00
 8003dec:	40014000 	.word	0x40014000

08003df0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e041      	b.n	8003e86 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f839 	bl	8003e8e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4610      	mov	r0, r2
 8003e30:	f000 fa5e 	bl	80042f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b086      	sub	sp, #24
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e088      	b.n	8003fd2 <HAL_TIM_IC_ConfigChannel+0x130>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d11b      	bne.n	8003f06 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	6819      	ldr	r1, [r3, #0]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f000 fc13 	bl	8004708 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699a      	ldr	r2, [r3, #24]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 020c 	bic.w	r2, r2, #12
 8003ef0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6999      	ldr	r1, [r3, #24]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	619a      	str	r2, [r3, #24]
 8003f04:	e060      	b.n	8003fc8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d11c      	bne.n	8003f46 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6819      	ldr	r1, [r3, #0]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f000 fc8b 	bl	8004836 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f2e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6999      	ldr	r1, [r3, #24]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	021a      	lsls	r2, r3, #8
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	619a      	str	r2, [r3, #24]
 8003f44:	e040      	b.n	8003fc8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d11b      	bne.n	8003f84 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	6819      	ldr	r1, [r3, #0]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f000 fcd8 	bl	8004910 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	69da      	ldr	r2, [r3, #28]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 020c 	bic.w	r2, r2, #12
 8003f6e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69d9      	ldr	r1, [r3, #28]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	61da      	str	r2, [r3, #28]
 8003f82:	e021      	b.n	8003fc8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d11c      	bne.n	8003fc4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	6819      	ldr	r1, [r3, #0]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f000 fcf5 	bl	8004988 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69da      	ldr	r2, [r3, #28]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003fac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69d9      	ldr	r1, [r3, #28]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	021a      	lsls	r2, r3, #8
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	61da      	str	r2, [r3, #28]
 8003fc2:	e001      	b.n	8003fc8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e0ae      	b.n	8004158 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b0c      	cmp	r3, #12
 8004006:	f200 809f 	bhi.w	8004148 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800400a:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	08004045 	.word	0x08004045
 8004014:	08004149 	.word	0x08004149
 8004018:	08004149 	.word	0x08004149
 800401c:	08004149 	.word	0x08004149
 8004020:	08004085 	.word	0x08004085
 8004024:	08004149 	.word	0x08004149
 8004028:	08004149 	.word	0x08004149
 800402c:	08004149 	.word	0x08004149
 8004030:	080040c7 	.word	0x080040c7
 8004034:	08004149 	.word	0x08004149
 8004038:	08004149 	.word	0x08004149
 800403c:	08004149 	.word	0x08004149
 8004040:	08004107 	.word	0x08004107
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 f9d0 	bl	80043f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0208 	orr.w	r2, r2, #8
 800405e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0204 	bic.w	r2, r2, #4
 800406e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6999      	ldr	r1, [r3, #24]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	619a      	str	r2, [r3, #24]
      break;
 8004082:	e064      	b.n	800414e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68b9      	ldr	r1, [r7, #8]
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fa16 	bl	80044bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800409e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6999      	ldr	r1, [r3, #24]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	021a      	lsls	r2, r3, #8
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	619a      	str	r2, [r3, #24]
      break;
 80040c4:	e043      	b.n	800414e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fa61 	bl	8004594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69da      	ldr	r2, [r3, #28]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0208 	orr.w	r2, r2, #8
 80040e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0204 	bic.w	r2, r2, #4
 80040f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69d9      	ldr	r1, [r3, #28]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	61da      	str	r2, [r3, #28]
      break;
 8004104:	e023      	b.n	800414e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68b9      	ldr	r1, [r7, #8]
 800410c:	4618      	mov	r0, r3
 800410e:	f000 faab 	bl	8004668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69da      	ldr	r2, [r3, #28]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69da      	ldr	r2, [r3, #28]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69d9      	ldr	r1, [r3, #28]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	021a      	lsls	r2, r3, #8
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	61da      	str	r2, [r3, #28]
      break;
 8004146:	e002      	b.n	800414e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	75fb      	strb	r3, [r7, #23]
      break;
 800414c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004156:	7dfb      	ldrb	r3, [r7, #23]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_TIM_ConfigClockSource+0x1c>
 8004178:	2302      	movs	r3, #2
 800417a:	e0b4      	b.n	80042e6 <HAL_TIM_ConfigClockSource+0x186>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800419a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b4:	d03e      	beq.n	8004234 <HAL_TIM_ConfigClockSource+0xd4>
 80041b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ba:	f200 8087 	bhi.w	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c2:	f000 8086 	beq.w	80042d2 <HAL_TIM_ConfigClockSource+0x172>
 80041c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ca:	d87f      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041cc:	2b70      	cmp	r3, #112	; 0x70
 80041ce:	d01a      	beq.n	8004206 <HAL_TIM_ConfigClockSource+0xa6>
 80041d0:	2b70      	cmp	r3, #112	; 0x70
 80041d2:	d87b      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041d4:	2b60      	cmp	r3, #96	; 0x60
 80041d6:	d050      	beq.n	800427a <HAL_TIM_ConfigClockSource+0x11a>
 80041d8:	2b60      	cmp	r3, #96	; 0x60
 80041da:	d877      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041dc:	2b50      	cmp	r3, #80	; 0x50
 80041de:	d03c      	beq.n	800425a <HAL_TIM_ConfigClockSource+0xfa>
 80041e0:	2b50      	cmp	r3, #80	; 0x50
 80041e2:	d873      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041e4:	2b40      	cmp	r3, #64	; 0x40
 80041e6:	d058      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x13a>
 80041e8:	2b40      	cmp	r3, #64	; 0x40
 80041ea:	d86f      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041ec:	2b30      	cmp	r3, #48	; 0x30
 80041ee:	d064      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x15a>
 80041f0:	2b30      	cmp	r3, #48	; 0x30
 80041f2:	d86b      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d060      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x15a>
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d867      	bhi.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d05c      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x15a>
 8004200:	2b10      	cmp	r3, #16
 8004202:	d05a      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x15a>
 8004204:	e062      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6899      	ldr	r1, [r3, #8]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f000 fc0f 	bl	8004a38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004228:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	609a      	str	r2, [r3, #8]
      break;
 8004232:	e04f      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	6899      	ldr	r1, [r3, #8]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f000 fbf8 	bl	8004a38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004256:	609a      	str	r2, [r3, #8]
      break;
 8004258:	e03c      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6859      	ldr	r1, [r3, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	461a      	mov	r2, r3
 8004268:	f000 fab6 	bl	80047d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2150      	movs	r1, #80	; 0x50
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fbc5 	bl	8004a02 <TIM_ITRx_SetConfig>
      break;
 8004278:	e02c      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6859      	ldr	r1, [r3, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	461a      	mov	r2, r3
 8004288:	f000 fb12 	bl	80048b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2160      	movs	r1, #96	; 0x60
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fbb5 	bl	8004a02 <TIM_ITRx_SetConfig>
      break;
 8004298:	e01c      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6859      	ldr	r1, [r3, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	461a      	mov	r2, r3
 80042a8:	f000 fa96 	bl	80047d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2140      	movs	r1, #64	; 0x40
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fba5 	bl	8004a02 <TIM_ITRx_SetConfig>
      break;
 80042b8:	e00c      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4619      	mov	r1, r3
 80042c4:	4610      	mov	r0, r2
 80042c6:	f000 fb9c 	bl	8004a02 <TIM_ITRx_SetConfig>
      break;
 80042ca:	e003      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	73fb      	strb	r3, [r7, #15]
      break;
 80042d0:	e000      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a34      	ldr	r2, [pc, #208]	; (80043d4 <TIM_Base_SetConfig+0xe4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00f      	beq.n	8004328 <TIM_Base_SetConfig+0x38>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430e:	d00b      	beq.n	8004328 <TIM_Base_SetConfig+0x38>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a31      	ldr	r2, [pc, #196]	; (80043d8 <TIM_Base_SetConfig+0xe8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d007      	beq.n	8004328 <TIM_Base_SetConfig+0x38>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a30      	ldr	r2, [pc, #192]	; (80043dc <TIM_Base_SetConfig+0xec>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d003      	beq.n	8004328 <TIM_Base_SetConfig+0x38>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a2f      	ldr	r2, [pc, #188]	; (80043e0 <TIM_Base_SetConfig+0xf0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d108      	bne.n	800433a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a25      	ldr	r2, [pc, #148]	; (80043d4 <TIM_Base_SetConfig+0xe4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d01b      	beq.n	800437a <TIM_Base_SetConfig+0x8a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004348:	d017      	beq.n	800437a <TIM_Base_SetConfig+0x8a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a22      	ldr	r2, [pc, #136]	; (80043d8 <TIM_Base_SetConfig+0xe8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d013      	beq.n	800437a <TIM_Base_SetConfig+0x8a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a21      	ldr	r2, [pc, #132]	; (80043dc <TIM_Base_SetConfig+0xec>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00f      	beq.n	800437a <TIM_Base_SetConfig+0x8a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a20      	ldr	r2, [pc, #128]	; (80043e0 <TIM_Base_SetConfig+0xf0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d00b      	beq.n	800437a <TIM_Base_SetConfig+0x8a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a1f      	ldr	r2, [pc, #124]	; (80043e4 <TIM_Base_SetConfig+0xf4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d007      	beq.n	800437a <TIM_Base_SetConfig+0x8a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a1e      	ldr	r2, [pc, #120]	; (80043e8 <TIM_Base_SetConfig+0xf8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d003      	beq.n	800437a <TIM_Base_SetConfig+0x8a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a1d      	ldr	r2, [pc, #116]	; (80043ec <TIM_Base_SetConfig+0xfc>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d108      	bne.n	800438c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4313      	orrs	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a08      	ldr	r2, [pc, #32]	; (80043d4 <TIM_Base_SetConfig+0xe4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d103      	bne.n	80043c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	615a      	str	r2, [r3, #20]
}
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40010000 	.word	0x40010000
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40000c00 	.word	0x40000c00
 80043e4:	40014000 	.word	0x40014000
 80043e8:	40014400 	.word	0x40014400
 80043ec:	40014800 	.word	0x40014800

080043f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f023 0201 	bic.w	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0303 	bic.w	r3, r3, #3
 8004426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f023 0302 	bic.w	r3, r3, #2
 8004438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a1c      	ldr	r2, [pc, #112]	; (80044b8 <TIM_OC1_SetConfig+0xc8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d10c      	bne.n	8004466 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f023 0308 	bic.w	r3, r3, #8
 8004452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f023 0304 	bic.w	r3, r3, #4
 8004464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <TIM_OC1_SetConfig+0xc8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d111      	bne.n	8004492 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800447c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	621a      	str	r2, [r3, #32]
}
 80044ac:	bf00      	nop
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40010000 	.word	0x40010000

080044bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	f023 0210 	bic.w	r2, r3, #16
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	021b      	lsls	r3, r3, #8
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f023 0320 	bic.w	r3, r3, #32
 8004506:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a1e      	ldr	r2, [pc, #120]	; (8004590 <TIM_OC2_SetConfig+0xd4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d10d      	bne.n	8004538 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004536:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a15      	ldr	r2, [pc, #84]	; (8004590 <TIM_OC2_SetConfig+0xd4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d113      	bne.n	8004568 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004546:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800454e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	621a      	str	r2, [r3, #32]
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40010000 	.word	0x40010000

08004594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0303 	bic.w	r3, r3, #3
 80045ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	021b      	lsls	r3, r3, #8
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a1d      	ldr	r2, [pc, #116]	; (8004664 <TIM_OC3_SetConfig+0xd0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10d      	bne.n	800460e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	021b      	lsls	r3, r3, #8
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800460c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a14      	ldr	r2, [pc, #80]	; (8004664 <TIM_OC3_SetConfig+0xd0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d113      	bne.n	800463e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800461c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	621a      	str	r2, [r3, #32]
}
 8004658:	bf00      	nop
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	40010000 	.word	0x40010000

08004668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800469e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	031b      	lsls	r3, r3, #12
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a10      	ldr	r2, [pc, #64]	; (8004704 <TIM_OC4_SetConfig+0x9c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d109      	bne.n	80046dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	019b      	lsls	r3, r3, #6
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	621a      	str	r2, [r3, #32]
}
 80046f6:	bf00      	nop
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40010000 	.word	0x40010000

08004708 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f023 0201 	bic.w	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a24      	ldr	r2, [pc, #144]	; (80047c4 <TIM_TI1_SetConfig+0xbc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d013      	beq.n	800475e <TIM_TI1_SetConfig+0x56>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473c:	d00f      	beq.n	800475e <TIM_TI1_SetConfig+0x56>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4a21      	ldr	r2, [pc, #132]	; (80047c8 <TIM_TI1_SetConfig+0xc0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00b      	beq.n	800475e <TIM_TI1_SetConfig+0x56>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4a20      	ldr	r2, [pc, #128]	; (80047cc <TIM_TI1_SetConfig+0xc4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d007      	beq.n	800475e <TIM_TI1_SetConfig+0x56>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4a1f      	ldr	r2, [pc, #124]	; (80047d0 <TIM_TI1_SetConfig+0xc8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d003      	beq.n	800475e <TIM_TI1_SetConfig+0x56>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4a1e      	ldr	r2, [pc, #120]	; (80047d4 <TIM_TI1_SetConfig+0xcc>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d101      	bne.n	8004762 <TIM_TI1_SetConfig+0x5a>
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <TIM_TI1_SetConfig+0x5c>
 8004762:	2300      	movs	r3, #0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f023 0303 	bic.w	r3, r3, #3
 800476e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	e003      	b.n	8004782 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004788:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	b2db      	uxtb	r3, r3
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f023 030a 	bic.w	r3, r3, #10
 800479c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f003 030a 	and.w	r3, r3, #10
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	621a      	str	r2, [r3, #32]
}
 80047b6:	bf00      	nop
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40010000 	.word	0x40010000
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40000800 	.word	0x40000800
 80047d0:	40000c00 	.word	0x40000c00
 80047d4:	40014000 	.word	0x40014000

080047d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f023 0201 	bic.w	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f023 030a 	bic.w	r3, r3, #10
 8004814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	621a      	str	r2, [r3, #32]
}
 800482a:	bf00      	nop
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004836:	b480      	push	{r7}
 8004838:	b087      	sub	sp, #28
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	607a      	str	r2, [r7, #4]
 8004842:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f023 0210 	bic.w	r2, r3, #16
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004862:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	031b      	lsls	r3, r3, #12
 800487a:	b29b      	uxth	r3, r3
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004888:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	621a      	str	r2, [r3, #32]
}
 80048a4:	bf00      	nop
 80048a6:	371c      	adds	r7, #28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f023 0210 	bic.w	r2, r3, #16
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	031b      	lsls	r3, r3, #12
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	621a      	str	r2, [r3, #32]
}
 8004904:	bf00      	nop
 8004906:	371c      	adds	r7, #28
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f023 0303 	bic.w	r3, r3, #3
 800493c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800494c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	b2db      	uxtb	r3, r3
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004960:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	621a      	str	r2, [r3, #32]
}
 800497c:	bf00      	nop
 800497e:	371c      	adds	r7, #28
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	021b      	lsls	r3, r3, #8
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	031b      	lsls	r3, r3, #12
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80049da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	031b      	lsls	r3, r3, #12
 80049e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	621a      	str	r2, [r3, #32]
}
 80049f6:	bf00      	nop
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f043 0307 	orr.w	r3, r3, #7
 8004a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	609a      	str	r2, [r3, #8]
}
 8004a2c:	bf00      	nop
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	021a      	lsls	r2, r3, #8
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	609a      	str	r2, [r3, #8]
}
 8004a6c:	bf00      	nop
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f003 031f 	and.w	r3, r3, #31
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a1a      	ldr	r2, [r3, #32]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	401a      	ands	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a1a      	ldr	r2, [r3, #32]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 031f 	and.w	r3, r3, #31
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	621a      	str	r2, [r3, #32]
}
 8004ab6:	bf00      	nop
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e050      	b.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1c      	ldr	r2, [pc, #112]	; (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d018      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b28:	d013      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a18      	ldr	r2, [pc, #96]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00e      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a16      	ldr	r2, [pc, #88]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d009      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a15      	ldr	r2, [pc, #84]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d004      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a13      	ldr	r2, [pc, #76]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d10c      	bne.n	8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40010000 	.word	0x40010000
 8004b90:	40000400 	.word	0x40000400
 8004b94:	40000800 	.word	0x40000800
 8004b98:	40000c00 	.word	0x40000c00
 8004b9c:	40014000 	.word	0x40014000

08004ba0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e03d      	b.n	8004c38 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e03f      	b.n	8004cd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fc ff0e 	bl	8001a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2224      	movs	r2, #36	; 0x24
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f829 	bl	8004ce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691a      	ldr	r2, [r3, #16]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695a      	ldr	r2, [r3, #20]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ce4:	b0c0      	sub	sp, #256	; 0x100
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	68d9      	ldr	r1, [r3, #12]
 8004cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	ea40 0301 	orr.w	r3, r0, r1
 8004d08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d38:	f021 010c 	bic.w	r1, r1, #12
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d46:	430b      	orrs	r3, r1
 8004d48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5a:	6999      	ldr	r1, [r3, #24]
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	ea40 0301 	orr.w	r3, r0, r1
 8004d66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4b8f      	ldr	r3, [pc, #572]	; (8004fac <UART_SetConfig+0x2cc>)
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d005      	beq.n	8004d80 <UART_SetConfig+0xa0>
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4b8d      	ldr	r3, [pc, #564]	; (8004fb0 <UART_SetConfig+0x2d0>)
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d104      	bne.n	8004d8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d80:	f7fe fe40 	bl	8003a04 <HAL_RCC_GetPCLK2Freq>
 8004d84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d88:	e003      	b.n	8004d92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d8a:	f7fe fe27 	bl	80039dc <HAL_RCC_GetPCLK1Freq>
 8004d8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d9c:	f040 810c 	bne.w	8004fb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004da4:	2200      	movs	r2, #0
 8004da6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004daa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004dae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004db2:	4622      	mov	r2, r4
 8004db4:	462b      	mov	r3, r5
 8004db6:	1891      	adds	r1, r2, r2
 8004db8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004dba:	415b      	adcs	r3, r3
 8004dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	eb12 0801 	adds.w	r8, r2, r1
 8004dc8:	4629      	mov	r1, r5
 8004dca:	eb43 0901 	adc.w	r9, r3, r1
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004de2:	4690      	mov	r8, r2
 8004de4:	4699      	mov	r9, r3
 8004de6:	4623      	mov	r3, r4
 8004de8:	eb18 0303 	adds.w	r3, r8, r3
 8004dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004df0:	462b      	mov	r3, r5
 8004df2:	eb49 0303 	adc.w	r3, r9, r3
 8004df6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e0e:	460b      	mov	r3, r1
 8004e10:	18db      	adds	r3, r3, r3
 8004e12:	653b      	str	r3, [r7, #80]	; 0x50
 8004e14:	4613      	mov	r3, r2
 8004e16:	eb42 0303 	adc.w	r3, r2, r3
 8004e1a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e24:	f7fb f9d6 	bl	80001d4 <__aeabi_uldivmod>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4b61      	ldr	r3, [pc, #388]	; (8004fb4 <UART_SetConfig+0x2d4>)
 8004e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	011c      	lsls	r4, r3, #4
 8004e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e48:	4642      	mov	r2, r8
 8004e4a:	464b      	mov	r3, r9
 8004e4c:	1891      	adds	r1, r2, r2
 8004e4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e50:	415b      	adcs	r3, r3
 8004e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e58:	4641      	mov	r1, r8
 8004e5a:	eb12 0a01 	adds.w	sl, r2, r1
 8004e5e:	4649      	mov	r1, r9
 8004e60:	eb43 0b01 	adc.w	fp, r3, r1
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e78:	4692      	mov	sl, r2
 8004e7a:	469b      	mov	fp, r3
 8004e7c:	4643      	mov	r3, r8
 8004e7e:	eb1a 0303 	adds.w	r3, sl, r3
 8004e82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e86:	464b      	mov	r3, r9
 8004e88:	eb4b 0303 	adc.w	r3, fp, r3
 8004e8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ea0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	18db      	adds	r3, r3, r3
 8004ea8:	643b      	str	r3, [r7, #64]	; 0x40
 8004eaa:	4613      	mov	r3, r2
 8004eac:	eb42 0303 	adc.w	r3, r2, r3
 8004eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8004eb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004eb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004eba:	f7fb f98b 	bl	80001d4 <__aeabi_uldivmod>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4b3b      	ldr	r3, [pc, #236]	; (8004fb4 <UART_SetConfig+0x2d4>)
 8004ec6:	fba3 2301 	umull	r2, r3, r3, r1
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	2264      	movs	r2, #100	; 0x64
 8004ece:	fb02 f303 	mul.w	r3, r2, r3
 8004ed2:	1acb      	subs	r3, r1, r3
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004eda:	4b36      	ldr	r3, [pc, #216]	; (8004fb4 <UART_SetConfig+0x2d4>)
 8004edc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ee0:	095b      	lsrs	r3, r3, #5
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ee8:	441c      	add	r4, r3
 8004eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ef4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ef8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004efc:	4642      	mov	r2, r8
 8004efe:	464b      	mov	r3, r9
 8004f00:	1891      	adds	r1, r2, r2
 8004f02:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f04:	415b      	adcs	r3, r3
 8004f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f0c:	4641      	mov	r1, r8
 8004f0e:	1851      	adds	r1, r2, r1
 8004f10:	6339      	str	r1, [r7, #48]	; 0x30
 8004f12:	4649      	mov	r1, r9
 8004f14:	414b      	adcs	r3, r1
 8004f16:	637b      	str	r3, [r7, #52]	; 0x34
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f24:	4659      	mov	r1, fp
 8004f26:	00cb      	lsls	r3, r1, #3
 8004f28:	4651      	mov	r1, sl
 8004f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f2e:	4651      	mov	r1, sl
 8004f30:	00ca      	lsls	r2, r1, #3
 8004f32:	4610      	mov	r0, r2
 8004f34:	4619      	mov	r1, r3
 8004f36:	4603      	mov	r3, r0
 8004f38:	4642      	mov	r2, r8
 8004f3a:	189b      	adds	r3, r3, r2
 8004f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f40:	464b      	mov	r3, r9
 8004f42:	460a      	mov	r2, r1
 8004f44:	eb42 0303 	adc.w	r3, r2, r3
 8004f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f60:	460b      	mov	r3, r1
 8004f62:	18db      	adds	r3, r3, r3
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f66:	4613      	mov	r3, r2
 8004f68:	eb42 0303 	adc.w	r3, r2, r3
 8004f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f76:	f7fb f92d 	bl	80001d4 <__aeabi_uldivmod>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <UART_SetConfig+0x2d4>)
 8004f80:	fba3 1302 	umull	r1, r3, r3, r2
 8004f84:	095b      	lsrs	r3, r3, #5
 8004f86:	2164      	movs	r1, #100	; 0x64
 8004f88:	fb01 f303 	mul.w	r3, r1, r3
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	3332      	adds	r3, #50	; 0x32
 8004f92:	4a08      	ldr	r2, [pc, #32]	; (8004fb4 <UART_SetConfig+0x2d4>)
 8004f94:	fba2 2303 	umull	r2, r3, r2, r3
 8004f98:	095b      	lsrs	r3, r3, #5
 8004f9a:	f003 0207 	and.w	r2, r3, #7
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4422      	add	r2, r4
 8004fa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fa8:	e105      	b.n	80051b6 <UART_SetConfig+0x4d6>
 8004faa:	bf00      	nop
 8004fac:	40011000 	.word	0x40011000
 8004fb0:	40011400 	.word	0x40011400
 8004fb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fca:	4642      	mov	r2, r8
 8004fcc:	464b      	mov	r3, r9
 8004fce:	1891      	adds	r1, r2, r2
 8004fd0:	6239      	str	r1, [r7, #32]
 8004fd2:	415b      	adcs	r3, r3
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fda:	4641      	mov	r1, r8
 8004fdc:	1854      	adds	r4, r2, r1
 8004fde:	4649      	mov	r1, r9
 8004fe0:	eb43 0501 	adc.w	r5, r3, r1
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	00eb      	lsls	r3, r5, #3
 8004fee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ff2:	00e2      	lsls	r2, r4, #3
 8004ff4:	4614      	mov	r4, r2
 8004ff6:	461d      	mov	r5, r3
 8004ff8:	4643      	mov	r3, r8
 8004ffa:	18e3      	adds	r3, r4, r3
 8004ffc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005000:	464b      	mov	r3, r9
 8005002:	eb45 0303 	adc.w	r3, r5, r3
 8005006:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800500a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005016:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005026:	4629      	mov	r1, r5
 8005028:	008b      	lsls	r3, r1, #2
 800502a:	4621      	mov	r1, r4
 800502c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005030:	4621      	mov	r1, r4
 8005032:	008a      	lsls	r2, r1, #2
 8005034:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005038:	f7fb f8cc 	bl	80001d4 <__aeabi_uldivmod>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4b60      	ldr	r3, [pc, #384]	; (80051c4 <UART_SetConfig+0x4e4>)
 8005042:	fba3 2302 	umull	r2, r3, r3, r2
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	011c      	lsls	r4, r3, #4
 800504a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800504e:	2200      	movs	r2, #0
 8005050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005054:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005058:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800505c:	4642      	mov	r2, r8
 800505e:	464b      	mov	r3, r9
 8005060:	1891      	adds	r1, r2, r2
 8005062:	61b9      	str	r1, [r7, #24]
 8005064:	415b      	adcs	r3, r3
 8005066:	61fb      	str	r3, [r7, #28]
 8005068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800506c:	4641      	mov	r1, r8
 800506e:	1851      	adds	r1, r2, r1
 8005070:	6139      	str	r1, [r7, #16]
 8005072:	4649      	mov	r1, r9
 8005074:	414b      	adcs	r3, r1
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005084:	4659      	mov	r1, fp
 8005086:	00cb      	lsls	r3, r1, #3
 8005088:	4651      	mov	r1, sl
 800508a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800508e:	4651      	mov	r1, sl
 8005090:	00ca      	lsls	r2, r1, #3
 8005092:	4610      	mov	r0, r2
 8005094:	4619      	mov	r1, r3
 8005096:	4603      	mov	r3, r0
 8005098:	4642      	mov	r2, r8
 800509a:	189b      	adds	r3, r3, r2
 800509c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050a0:	464b      	mov	r3, r9
 80050a2:	460a      	mov	r2, r1
 80050a4:	eb42 0303 	adc.w	r3, r2, r3
 80050a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80050b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050c4:	4649      	mov	r1, r9
 80050c6:	008b      	lsls	r3, r1, #2
 80050c8:	4641      	mov	r1, r8
 80050ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ce:	4641      	mov	r1, r8
 80050d0:	008a      	lsls	r2, r1, #2
 80050d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050d6:	f7fb f87d 	bl	80001d4 <__aeabi_uldivmod>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4b39      	ldr	r3, [pc, #228]	; (80051c4 <UART_SetConfig+0x4e4>)
 80050e0:	fba3 1302 	umull	r1, r3, r3, r2
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	2164      	movs	r1, #100	; 0x64
 80050e8:	fb01 f303 	mul.w	r3, r1, r3
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	3332      	adds	r3, #50	; 0x32
 80050f2:	4a34      	ldr	r2, [pc, #208]	; (80051c4 <UART_SetConfig+0x4e4>)
 80050f4:	fba2 2303 	umull	r2, r3, r2, r3
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050fe:	441c      	add	r4, r3
 8005100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005104:	2200      	movs	r2, #0
 8005106:	673b      	str	r3, [r7, #112]	; 0x70
 8005108:	677a      	str	r2, [r7, #116]	; 0x74
 800510a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800510e:	4642      	mov	r2, r8
 8005110:	464b      	mov	r3, r9
 8005112:	1891      	adds	r1, r2, r2
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	415b      	adcs	r3, r3
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800511e:	4641      	mov	r1, r8
 8005120:	1851      	adds	r1, r2, r1
 8005122:	6039      	str	r1, [r7, #0]
 8005124:	4649      	mov	r1, r9
 8005126:	414b      	adcs	r3, r1
 8005128:	607b      	str	r3, [r7, #4]
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005136:	4659      	mov	r1, fp
 8005138:	00cb      	lsls	r3, r1, #3
 800513a:	4651      	mov	r1, sl
 800513c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005140:	4651      	mov	r1, sl
 8005142:	00ca      	lsls	r2, r1, #3
 8005144:	4610      	mov	r0, r2
 8005146:	4619      	mov	r1, r3
 8005148:	4603      	mov	r3, r0
 800514a:	4642      	mov	r2, r8
 800514c:	189b      	adds	r3, r3, r2
 800514e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005150:	464b      	mov	r3, r9
 8005152:	460a      	mov	r2, r1
 8005154:	eb42 0303 	adc.w	r3, r2, r3
 8005158:	66fb      	str	r3, [r7, #108]	; 0x6c
 800515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	663b      	str	r3, [r7, #96]	; 0x60
 8005164:	667a      	str	r2, [r7, #100]	; 0x64
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005172:	4649      	mov	r1, r9
 8005174:	008b      	lsls	r3, r1, #2
 8005176:	4641      	mov	r1, r8
 8005178:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800517c:	4641      	mov	r1, r8
 800517e:	008a      	lsls	r2, r1, #2
 8005180:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005184:	f7fb f826 	bl	80001d4 <__aeabi_uldivmod>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <UART_SetConfig+0x4e4>)
 800518e:	fba3 1302 	umull	r1, r3, r3, r2
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	2164      	movs	r1, #100	; 0x64
 8005196:	fb01 f303 	mul.w	r3, r1, r3
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	3332      	adds	r3, #50	; 0x32
 80051a0:	4a08      	ldr	r2, [pc, #32]	; (80051c4 <UART_SetConfig+0x4e4>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	f003 020f 	and.w	r2, r3, #15
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4422      	add	r2, r4
 80051b4:	609a      	str	r2, [r3, #8]
}
 80051b6:	bf00      	nop
 80051b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051bc:	46bd      	mov	sp, r7
 80051be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051c2:	bf00      	nop
 80051c4:	51eb851f 	.word	0x51eb851f

080051c8 <_Znwj>:
 80051c8:	2801      	cmp	r0, #1
 80051ca:	bf38      	it	cc
 80051cc:	2001      	movcc	r0, #1
 80051ce:	b510      	push	{r4, lr}
 80051d0:	4604      	mov	r4, r0
 80051d2:	4620      	mov	r0, r4
 80051d4:	f000 f844 	bl	8005260 <malloc>
 80051d8:	b930      	cbnz	r0, 80051e8 <_Znwj+0x20>
 80051da:	f000 f807 	bl	80051ec <_ZSt15get_new_handlerv>
 80051de:	b908      	cbnz	r0, 80051e4 <_Znwj+0x1c>
 80051e0:	f000 f80c 	bl	80051fc <abort>
 80051e4:	4780      	blx	r0
 80051e6:	e7f4      	b.n	80051d2 <_Znwj+0xa>
 80051e8:	bd10      	pop	{r4, pc}
	...

080051ec <_ZSt15get_new_handlerv>:
 80051ec:	4b02      	ldr	r3, [pc, #8]	; (80051f8 <_ZSt15get_new_handlerv+0xc>)
 80051ee:	6818      	ldr	r0, [r3, #0]
 80051f0:	f3bf 8f5b 	dmb	ish
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	2000066c 	.word	0x2000066c

080051fc <abort>:
 80051fc:	b508      	push	{r3, lr}
 80051fe:	2006      	movs	r0, #6
 8005200:	f000 f918 	bl	8005434 <raise>
 8005204:	2001      	movs	r0, #1
 8005206:	f7fb ffa5 	bl	8001154 <_exit>
	...

0800520c <__errno>:
 800520c:	4b01      	ldr	r3, [pc, #4]	; (8005214 <__errno+0x8>)
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	2000000c 	.word	0x2000000c

08005218 <__libc_init_array>:
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	4d0d      	ldr	r5, [pc, #52]	; (8005250 <__libc_init_array+0x38>)
 800521c:	4c0d      	ldr	r4, [pc, #52]	; (8005254 <__libc_init_array+0x3c>)
 800521e:	1b64      	subs	r4, r4, r5
 8005220:	10a4      	asrs	r4, r4, #2
 8005222:	2600      	movs	r6, #0
 8005224:	42a6      	cmp	r6, r4
 8005226:	d109      	bne.n	800523c <__libc_init_array+0x24>
 8005228:	4d0b      	ldr	r5, [pc, #44]	; (8005258 <__libc_init_array+0x40>)
 800522a:	4c0c      	ldr	r4, [pc, #48]	; (800525c <__libc_init_array+0x44>)
 800522c:	f000 f92c 	bl	8005488 <_init>
 8005230:	1b64      	subs	r4, r4, r5
 8005232:	10a4      	asrs	r4, r4, #2
 8005234:	2600      	movs	r6, #0
 8005236:	42a6      	cmp	r6, r4
 8005238:	d105      	bne.n	8005246 <__libc_init_array+0x2e>
 800523a:	bd70      	pop	{r4, r5, r6, pc}
 800523c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005240:	4798      	blx	r3
 8005242:	3601      	adds	r6, #1
 8005244:	e7ee      	b.n	8005224 <__libc_init_array+0xc>
 8005246:	f855 3b04 	ldr.w	r3, [r5], #4
 800524a:	4798      	blx	r3
 800524c:	3601      	adds	r6, #1
 800524e:	e7f2      	b.n	8005236 <__libc_init_array+0x1e>
 8005250:	080055b8 	.word	0x080055b8
 8005254:	080055b8 	.word	0x080055b8
 8005258:	080055b8 	.word	0x080055b8
 800525c:	080055c0 	.word	0x080055c0

08005260 <malloc>:
 8005260:	4b02      	ldr	r3, [pc, #8]	; (800526c <malloc+0xc>)
 8005262:	4601      	mov	r1, r0
 8005264:	6818      	ldr	r0, [r3, #0]
 8005266:	f000 b839 	b.w	80052dc <_malloc_r>
 800526a:	bf00      	nop
 800526c:	2000000c 	.word	0x2000000c

08005270 <memcpy>:
 8005270:	440a      	add	r2, r1
 8005272:	4291      	cmp	r1, r2
 8005274:	f100 33ff 	add.w	r3, r0, #4294967295
 8005278:	d100      	bne.n	800527c <memcpy+0xc>
 800527a:	4770      	bx	lr
 800527c:	b510      	push	{r4, lr}
 800527e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005286:	4291      	cmp	r1, r2
 8005288:	d1f9      	bne.n	800527e <memcpy+0xe>
 800528a:	bd10      	pop	{r4, pc}

0800528c <memset>:
 800528c:	4402      	add	r2, r0
 800528e:	4603      	mov	r3, r0
 8005290:	4293      	cmp	r3, r2
 8005292:	d100      	bne.n	8005296 <memset+0xa>
 8005294:	4770      	bx	lr
 8005296:	f803 1b01 	strb.w	r1, [r3], #1
 800529a:	e7f9      	b.n	8005290 <memset+0x4>

0800529c <sbrk_aligned>:
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	4e0e      	ldr	r6, [pc, #56]	; (80052d8 <sbrk_aligned+0x3c>)
 80052a0:	460c      	mov	r4, r1
 80052a2:	6831      	ldr	r1, [r6, #0]
 80052a4:	4605      	mov	r5, r0
 80052a6:	b911      	cbnz	r1, 80052ae <sbrk_aligned+0x12>
 80052a8:	f000 f88c 	bl	80053c4 <_sbrk_r>
 80052ac:	6030      	str	r0, [r6, #0]
 80052ae:	4621      	mov	r1, r4
 80052b0:	4628      	mov	r0, r5
 80052b2:	f000 f887 	bl	80053c4 <_sbrk_r>
 80052b6:	1c43      	adds	r3, r0, #1
 80052b8:	d00a      	beq.n	80052d0 <sbrk_aligned+0x34>
 80052ba:	1cc4      	adds	r4, r0, #3
 80052bc:	f024 0403 	bic.w	r4, r4, #3
 80052c0:	42a0      	cmp	r0, r4
 80052c2:	d007      	beq.n	80052d4 <sbrk_aligned+0x38>
 80052c4:	1a21      	subs	r1, r4, r0
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 f87c 	bl	80053c4 <_sbrk_r>
 80052cc:	3001      	adds	r0, #1
 80052ce:	d101      	bne.n	80052d4 <sbrk_aligned+0x38>
 80052d0:	f04f 34ff 	mov.w	r4, #4294967295
 80052d4:	4620      	mov	r0, r4
 80052d6:	bd70      	pop	{r4, r5, r6, pc}
 80052d8:	20000674 	.word	0x20000674

080052dc <_malloc_r>:
 80052dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052e0:	1ccd      	adds	r5, r1, #3
 80052e2:	f025 0503 	bic.w	r5, r5, #3
 80052e6:	3508      	adds	r5, #8
 80052e8:	2d0c      	cmp	r5, #12
 80052ea:	bf38      	it	cc
 80052ec:	250c      	movcc	r5, #12
 80052ee:	2d00      	cmp	r5, #0
 80052f0:	4607      	mov	r7, r0
 80052f2:	db01      	blt.n	80052f8 <_malloc_r+0x1c>
 80052f4:	42a9      	cmp	r1, r5
 80052f6:	d905      	bls.n	8005304 <_malloc_r+0x28>
 80052f8:	230c      	movs	r3, #12
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	2600      	movs	r6, #0
 80052fe:	4630      	mov	r0, r6
 8005300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005304:	4e2e      	ldr	r6, [pc, #184]	; (80053c0 <_malloc_r+0xe4>)
 8005306:	f000 f8b1 	bl	800546c <__malloc_lock>
 800530a:	6833      	ldr	r3, [r6, #0]
 800530c:	461c      	mov	r4, r3
 800530e:	bb34      	cbnz	r4, 800535e <_malloc_r+0x82>
 8005310:	4629      	mov	r1, r5
 8005312:	4638      	mov	r0, r7
 8005314:	f7ff ffc2 	bl	800529c <sbrk_aligned>
 8005318:	1c43      	adds	r3, r0, #1
 800531a:	4604      	mov	r4, r0
 800531c:	d14d      	bne.n	80053ba <_malloc_r+0xde>
 800531e:	6834      	ldr	r4, [r6, #0]
 8005320:	4626      	mov	r6, r4
 8005322:	2e00      	cmp	r6, #0
 8005324:	d140      	bne.n	80053a8 <_malloc_r+0xcc>
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	4631      	mov	r1, r6
 800532a:	4638      	mov	r0, r7
 800532c:	eb04 0803 	add.w	r8, r4, r3
 8005330:	f000 f848 	bl	80053c4 <_sbrk_r>
 8005334:	4580      	cmp	r8, r0
 8005336:	d13a      	bne.n	80053ae <_malloc_r+0xd2>
 8005338:	6821      	ldr	r1, [r4, #0]
 800533a:	3503      	adds	r5, #3
 800533c:	1a6d      	subs	r5, r5, r1
 800533e:	f025 0503 	bic.w	r5, r5, #3
 8005342:	3508      	adds	r5, #8
 8005344:	2d0c      	cmp	r5, #12
 8005346:	bf38      	it	cc
 8005348:	250c      	movcc	r5, #12
 800534a:	4629      	mov	r1, r5
 800534c:	4638      	mov	r0, r7
 800534e:	f7ff ffa5 	bl	800529c <sbrk_aligned>
 8005352:	3001      	adds	r0, #1
 8005354:	d02b      	beq.n	80053ae <_malloc_r+0xd2>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	442b      	add	r3, r5
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	e00e      	b.n	800537c <_malloc_r+0xa0>
 800535e:	6822      	ldr	r2, [r4, #0]
 8005360:	1b52      	subs	r2, r2, r5
 8005362:	d41e      	bmi.n	80053a2 <_malloc_r+0xc6>
 8005364:	2a0b      	cmp	r2, #11
 8005366:	d916      	bls.n	8005396 <_malloc_r+0xba>
 8005368:	1961      	adds	r1, r4, r5
 800536a:	42a3      	cmp	r3, r4
 800536c:	6025      	str	r5, [r4, #0]
 800536e:	bf18      	it	ne
 8005370:	6059      	strne	r1, [r3, #4]
 8005372:	6863      	ldr	r3, [r4, #4]
 8005374:	bf08      	it	eq
 8005376:	6031      	streq	r1, [r6, #0]
 8005378:	5162      	str	r2, [r4, r5]
 800537a:	604b      	str	r3, [r1, #4]
 800537c:	4638      	mov	r0, r7
 800537e:	f104 060b 	add.w	r6, r4, #11
 8005382:	f000 f879 	bl	8005478 <__malloc_unlock>
 8005386:	f026 0607 	bic.w	r6, r6, #7
 800538a:	1d23      	adds	r3, r4, #4
 800538c:	1af2      	subs	r2, r6, r3
 800538e:	d0b6      	beq.n	80052fe <_malloc_r+0x22>
 8005390:	1b9b      	subs	r3, r3, r6
 8005392:	50a3      	str	r3, [r4, r2]
 8005394:	e7b3      	b.n	80052fe <_malloc_r+0x22>
 8005396:	6862      	ldr	r2, [r4, #4]
 8005398:	42a3      	cmp	r3, r4
 800539a:	bf0c      	ite	eq
 800539c:	6032      	streq	r2, [r6, #0]
 800539e:	605a      	strne	r2, [r3, #4]
 80053a0:	e7ec      	b.n	800537c <_malloc_r+0xa0>
 80053a2:	4623      	mov	r3, r4
 80053a4:	6864      	ldr	r4, [r4, #4]
 80053a6:	e7b2      	b.n	800530e <_malloc_r+0x32>
 80053a8:	4634      	mov	r4, r6
 80053aa:	6876      	ldr	r6, [r6, #4]
 80053ac:	e7b9      	b.n	8005322 <_malloc_r+0x46>
 80053ae:	230c      	movs	r3, #12
 80053b0:	603b      	str	r3, [r7, #0]
 80053b2:	4638      	mov	r0, r7
 80053b4:	f000 f860 	bl	8005478 <__malloc_unlock>
 80053b8:	e7a1      	b.n	80052fe <_malloc_r+0x22>
 80053ba:	6025      	str	r5, [r4, #0]
 80053bc:	e7de      	b.n	800537c <_malloc_r+0xa0>
 80053be:	bf00      	nop
 80053c0:	20000670 	.word	0x20000670

080053c4 <_sbrk_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4d06      	ldr	r5, [pc, #24]	; (80053e0 <_sbrk_r+0x1c>)
 80053c8:	2300      	movs	r3, #0
 80053ca:	4604      	mov	r4, r0
 80053cc:	4608      	mov	r0, r1
 80053ce:	602b      	str	r3, [r5, #0]
 80053d0:	f7fb feca 	bl	8001168 <_sbrk>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_sbrk_r+0x1a>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	b103      	cbz	r3, 80053de <_sbrk_r+0x1a>
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	20000678 	.word	0x20000678

080053e4 <_raise_r>:
 80053e4:	291f      	cmp	r1, #31
 80053e6:	b538      	push	{r3, r4, r5, lr}
 80053e8:	4604      	mov	r4, r0
 80053ea:	460d      	mov	r5, r1
 80053ec:	d904      	bls.n	80053f8 <_raise_r+0x14>
 80053ee:	2316      	movs	r3, #22
 80053f0:	6003      	str	r3, [r0, #0]
 80053f2:	f04f 30ff 	mov.w	r0, #4294967295
 80053f6:	bd38      	pop	{r3, r4, r5, pc}
 80053f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80053fa:	b112      	cbz	r2, 8005402 <_raise_r+0x1e>
 80053fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005400:	b94b      	cbnz	r3, 8005416 <_raise_r+0x32>
 8005402:	4620      	mov	r0, r4
 8005404:	f000 f830 	bl	8005468 <_getpid_r>
 8005408:	462a      	mov	r2, r5
 800540a:	4601      	mov	r1, r0
 800540c:	4620      	mov	r0, r4
 800540e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005412:	f000 b817 	b.w	8005444 <_kill_r>
 8005416:	2b01      	cmp	r3, #1
 8005418:	d00a      	beq.n	8005430 <_raise_r+0x4c>
 800541a:	1c59      	adds	r1, r3, #1
 800541c:	d103      	bne.n	8005426 <_raise_r+0x42>
 800541e:	2316      	movs	r3, #22
 8005420:	6003      	str	r3, [r0, #0]
 8005422:	2001      	movs	r0, #1
 8005424:	e7e7      	b.n	80053f6 <_raise_r+0x12>
 8005426:	2400      	movs	r4, #0
 8005428:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800542c:	4628      	mov	r0, r5
 800542e:	4798      	blx	r3
 8005430:	2000      	movs	r0, #0
 8005432:	e7e0      	b.n	80053f6 <_raise_r+0x12>

08005434 <raise>:
 8005434:	4b02      	ldr	r3, [pc, #8]	; (8005440 <raise+0xc>)
 8005436:	4601      	mov	r1, r0
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	f7ff bfd3 	b.w	80053e4 <_raise_r>
 800543e:	bf00      	nop
 8005440:	2000000c 	.word	0x2000000c

08005444 <_kill_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	4d07      	ldr	r5, [pc, #28]	; (8005464 <_kill_r+0x20>)
 8005448:	2300      	movs	r3, #0
 800544a:	4604      	mov	r4, r0
 800544c:	4608      	mov	r0, r1
 800544e:	4611      	mov	r1, r2
 8005450:	602b      	str	r3, [r5, #0]
 8005452:	f7fb fe6f 	bl	8001134 <_kill>
 8005456:	1c43      	adds	r3, r0, #1
 8005458:	d102      	bne.n	8005460 <_kill_r+0x1c>
 800545a:	682b      	ldr	r3, [r5, #0]
 800545c:	b103      	cbz	r3, 8005460 <_kill_r+0x1c>
 800545e:	6023      	str	r3, [r4, #0]
 8005460:	bd38      	pop	{r3, r4, r5, pc}
 8005462:	bf00      	nop
 8005464:	20000678 	.word	0x20000678

08005468 <_getpid_r>:
 8005468:	f7fb be5c 	b.w	8001124 <_getpid>

0800546c <__malloc_lock>:
 800546c:	4801      	ldr	r0, [pc, #4]	; (8005474 <__malloc_lock+0x8>)
 800546e:	f000 b809 	b.w	8005484 <__retarget_lock_acquire_recursive>
 8005472:	bf00      	nop
 8005474:	2000067c 	.word	0x2000067c

08005478 <__malloc_unlock>:
 8005478:	4801      	ldr	r0, [pc, #4]	; (8005480 <__malloc_unlock+0x8>)
 800547a:	f000 b804 	b.w	8005486 <__retarget_lock_release_recursive>
 800547e:	bf00      	nop
 8005480:	2000067c 	.word	0x2000067c

08005484 <__retarget_lock_acquire_recursive>:
 8005484:	4770      	bx	lr

08005486 <__retarget_lock_release_recursive>:
 8005486:	4770      	bx	lr

08005488 <_init>:
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	bf00      	nop
 800548c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548e:	bc08      	pop	{r3}
 8005490:	469e      	mov	lr, r3
 8005492:	4770      	bx	lr

08005494 <_fini>:
 8005494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005496:	bf00      	nop
 8005498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549a:	bc08      	pop	{r3}
 800549c:	469e      	mov	lr, r3
 800549e:	4770      	bx	lr
